@page
@using System.Globalization
@using System.Text.Encodings.Web
@using System.Text.Json
@using ProjectPano
@using ProjectPano.Model
@using static ProjectPano.Model.DAL
@model ProjectPano.Pages.ETC.PMUI4Model
@{
    ViewData["FullWidth"] = true;
    ViewData["Title"] = "Estimates to Complete";
    var allEmpData = Model.ListEmpGroupResources?.Any() == true ? Model.ListEmpGroupResources : new List<vwEmpGroupResources>();
    var budgetData = Model.vwBudgetActuals?.Any() == true ? Model.vwBudgetActuals : new List<vwBudgetActuals_REVISED>();
    // var progressDict = Model.JobProgressDict;
    var progressDict = Model.JobProgressDict ?? new Dictionary<int, decimal?>();
}

<h5 class="custom-h1">Estimates to Complete - OLD</h5>


<div class="d-flex align-items-end mb-3 w-100" style="gap: 1.5rem;">
    <div class="d-flex align-items-center">
        <label for="pmDropdown" class="mb-0 mr-2">PM:</label>
        <select id="pmDropdown" class="selectpicker form-control w-auto" style="margin-left: 0.5rem;" data-live-search="true" asp-for="SelectedMgrName" asp-items="Model.MgrSelectList">
            <option value="">Pick a Mgr</option>
        </select>
    </div>

    <div class="d-flex align-items-center" style="margin-left: 1rem;">
        <label for="clientSearch" class="mb-0 mr-2">Search:</label>
        <input type="text" id="clientSearch" class="form-control form-control-sm" style="margin-left: 0.5rem;" placeholder="Filter by Client/Job" />
    </div>

    <div class="ml-auto d-flex align-items-center">
        <p class="alert @Model.ForecastAlertClass mb-0 py-1 px-2">@Model.ForecastMessage</p>
    </div>
</div>




<form method="post" asp-page-handler="SaveETCHrsInline">
    <table id="JobList" class="table table-bordered table-sm">
        <thead>
            <tr  style="font-size:0.80rem">
                <th rowspan="2">Client and Job</th>
                <th rowspan="2">% Comp</th>
                <th colspan="4" class="text-center">PM</th>
                <th colspan="4" class="text-center">Engr</th>
                <th colspan="4" class="text-center">EIC</th>
                <th colspan="4" class="text-center">Design</th>
            </tr>
            <tr>
                @for (int i = 0; i < 4; i++)
                {
                    <th style="font-size:0.80rem">ETCHrs</th>
                    <th style="font-size:0.80rem">Start</th>
                    <th style="font-size:0.80rem">Finish</th>
                    <th style="font-size:0.80rem">Curve</th>
                }
            </tr>
        </thead>
<tbody>
@*     @if (Model.FilteredRows != null && Model.FilteredRows.Any())
    { *@
    @foreach (var item in Model.FilteredRows)
    {
        if(item.SimpleFlag==1)
        {
            <!-- editable row -->
            <tr>
                <td style="font-size:0.80rem">@item.ClientJob</td>

                @{
                    var pctValue = progressDict.GetValueOrDefault(item.JobID);
                    var displayValue = pctValue.HasValue ? ((int)Math.Round(pctValue.Value * 100)) : (int?)null;
                }
                <td style="display: flex; justify-content: flex-end; align-items: center; white-space: nowrap;">
                    <input id="PctComplete" type="number" 
                        name="PctComplete_@item.JobID"
                        step="1" min="0" max="100"
                        class="form-control form-control-sm"
                        value="@(displayValue?.ToString() ?? "")"
                        style="width: 70px;" />
                    <span style="margin-left: 4px;">%</span>
                </td>

                @foreach (var role in new[] { "PM", "Engr", "EIC", "Design" })
                {
                    var color = role switch
                    {
                        "PM" => "background-color: #d4edda;",
                        "Engr" => "background-color: #cce5ff;",
                        "EIC" => "background-color: #fff3cd;",
                        "Design" => "background-color: #f8d7da;",
                        _ => ""
                    };

                    var etchrs = Model.GetETCHrsForRole(item.JobID, role);
                    var start = (DateTime?)item.GetType().GetProperty($"PlanStartWE_{role}")?.GetValue(item);
                    var finish = (DateTime?)item.GetType().GetProperty($"PlanFinishWE_{role}")?.GetValue(item);
                    var curveName = (string?)item.GetType().GetProperty($"CurveName_{role}")?.GetValue(item);
                    var discETCID = (int?)item.GetType().GetProperty($"DiscETCID_{role}")?.GetValue(item);
                    var obid = (int?)item.GetType().GetProperty($"OBID_{role}")?.GetValue(item);

                    if (discETCID.HasValue) // ✅ guard against nulls
                    {
                        <td style="font-size: 0.8rem; @color">
                            @{
                                var lightStyle = etchrs == 0 ? "color: #bbb;" 
                                    : etchrs < 0 ? "color: red;" 
                                    : "";
                            }
                            <input type="number" name="ETCHrs_@discETCID"
                                value="@etchrs.ToString("0")"
                                class="form-control form-control-sm etchrs-input"
                                data-role="@role"
                                step="any"
                                style="@lightStyle;font-size:0.80rem" />
                        </td>
                        <td style="font-size: 0.75rem; @color">
                            <input type="text" name="Start_@discETCID" value="@start?.ToString("yyyy-MM-dd")" class="form-control date-picker" style="width: 90px; font-size:0.75rem" />
                        </td>
                        <td style="font-size: 0.75rem; @color">
                            <input type="text" name="Finish_@discETCID" value="@finish?.ToString("yyyy-MM-dd")" class="form-control date-picker" style="width: 90px; font-size:0.75rem" />
                        </td>
                        <td style="@color">
                            <select name="CurveID_@discETCID" class="form-control form-control-sm" style="@color;font-size:0.80rem">
                                <option value="">-- Select Curve --</option>
                                @{
                                    var curveID = (decimal?)item.GetType().GetProperty($"CurveID_{role}")?.GetValue(item) ?? 0;
                                }
                                @foreach (var curve in Model.ListCurves)
                                {
                                    var isSelected = curve.CurveID == curveID ? "selected" : "";
                                    @:<option value="@curve.CurveID" @isSelected>@curve.CurveName</option>
                                }
                            </select>
                        </td>

                        <!-- Hidden fields -->
                        <input type="hidden" name="OBID_@discETCID" value="@obid" />
                        <input type="hidden" name="JobID_@discETCID" value="@item.JobID" />
                        @* <input type="hidden" name="mgrName" value="@Model.SelectedMgrName" /> *@
                    }
                    else
                    {
                        <!-- if no DiscETCID, render empty cells so table layout stays aligned -->
                        <td colspan="4" class="text-center text-muted">N/A</td>
                    }
                }
            </tr>
        }
@*         else
        {
            <!-- Non-editable row: only show job name -->
            <tr class="table-secondary">
                <td style="font-size:0.80rem">@item.ClientJob</td>
                <td colspan="17" class="text-muted text-center">Not updatable in this format - see Catherine</td>
            </tr>
        } *@
        }
    }
</tbody>
        <tfoot>
            <tr>
                <td colspan="2">Total</td>
                    @foreach (var role in new[] { "PM", "Engr", "EIC", "Design" })
                {
                    var totalHrs = Model.FilteredRows
                        .Where(row => row.SimpleFlag==1)
                        .Sum(row => Model.GetETCHrsForRole(row.JobID, role));
                    @* <td colspan="4" class="text-end" style="font-weight:bold">@totalHrs.ToString("0")</td> *@
                    @* <td colspan="4" class="text-end total-hours" data-role="@role" style="font-weight:bold">@totalHrs.ToString("0")</td> *@
                    <td colspan="4" class="text-end total-hours"
                        data-role="@role"
                        style="font-weight:bold">
                        @totalHrs.ToString("0")
                    </td>
                }
            </tr>
        </tfoot>

    </table>

    <input type="hidden" name="SubmittedBy" value="@Environment.UserName" />
    <input type="hidden" name="mgrName" value="@Model.SelectedMgrName" />
    <button type="submit" asp-page-handler="SaveETCHrsInline" class="btn btn-primary btn-sm">Save All</button>
</form>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1"></script>
    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>

<script>

    // $(document).ready(function () {

    //     $('#pmDropdown').on('change', function () {
    //         const mgr = $(this).val();
    //         if (mgr) {
    //             // reload page with mgrName in query string
    //             window.location.href = `/ETC/PMUI3?mgrName=${encodeURIComponent(mgr)}`;
    //         } else {
    //             // optional: reload page without filter if no mgr selected
    //             window.location.href = `/ETC/PMUI3`;
    //         }
    //     });

    // });

    // document.addEventListener("DOMContentLoaded", function () {
    //     flatpickr(".date-picker", {
    //         altInput: true,
    //         altFormat: "m-d-Y",
    //         dateFormat: "Y-m-d",  // this is the format submitted to server
    //         allowInput: true
    //     });
    // });

    // document.getElementById('clientSearch').addEventListener('input', function () {
    //     const search = this.value.toLowerCase();
    //     const rows = document.querySelectorAll('#JobList tbody tr');

    //     rows.forEach(row => {
    //         const text = row.querySelector('td')?.textContent.toLowerCase() || '';
    //         row.style.display = text.includes(search) ? '' : 'none';
    //     });
    // });

$(document).ready(function () {

    // Manager dropdown
    $('#pmDropdown').on('change', function () {
        const mgr = $(this).val();
        if (mgr) {
            window.location.href = `/ETC/PMUI4?mgrName=${encodeURIComponent(mgr)}`;
        } else {
            window.location.href = `/ETC/PMUI4`;
        }
    });

    // Prevent Enter from submitting the form in JobList
    $('#JobList').on('keydown', 'input', function (e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            return false;
        }
    });

    // Only 'save' the visible records
    $('form[asp-page-handler="SaveETCHrsInline"]').on('submit', function () {
        // Disable all inputs in hidden rows so they don't get posted
        $('#JobList tbody tr:hidden').find('input, select, textarea').prop('disabled', true);
    });

    // Dynamic totals updater (with visible row filtering)
    const etchrsInputs = $('.etchrs-input');

    function updateTotals() {
        const totals = { "PM": 0, "Engr": 0, "EIC": 0, "Design": 0 };

        etchrsInputs.each(function () {
            const row = $(this).closest('tr');

            // Skip rows that are hidden by search filter
            if (row.css('display') === 'none') return;

            const value = parseFloat($(this).val()) || 0;
            const role = $(this).data('role');
            if (role) totals[role] += value;
        });

        $('.total-hours').each(function () {
            const role = $(this).data('role');
            $(this).text(totals[role].toFixed(0));
        });
    }

    etchrsInputs.on('input', updateTotals);

    // Run once on load
    updateTotals();

    // Client search filter
    $('#clientSearch').on('input', function () {
        const search = this.value.toLowerCase();
        const rows = $('#JobList tbody tr');

        // Re-enable everything before filtering
        $('#JobList tbody tr').find('input, select, textarea').prop('disabled', false);

        rows.each(function () {
            const text = $(this).find('td').first().text().toLowerCase();
            $(this).toggle(text.includes(search));
        });

        // Recalculate totals after filtering
        updateTotals();
    });
});

// Flatpickr setup
document.addEventListener("DOMContentLoaded", function () {
    flatpickr(".date-picker", {
        altInput: true,
        altFormat: "m-d-Y",
        dateFormat: "Y-m-d",
        allowInput: true
    });
});

</script>
}
