@page
@model ProjectPano.Pages.NewJobs.IndexModel
@{
    ViewData["FullWidth"] = false;
    ViewData["Title"] = "NewJobs";
}

@* <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"> *@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
@* <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script> *@
<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<h5 class="custom-h1">Monthly New Jobs Overview</h5>
<br />
<div class="chart-container">
    <canvas id="jobsChart"></canvas>
</div>

<br />
<br />

<!-- Total Summary Row -->
<div class="filtered-summary">
    <table class="table table-bordered table-compact">
    <thead>
        <tr style="font-weight: bold; background-color: #f5f5f5;">
            <td colspan="6" id="filterSummary">Filtered Total</td>
            <td style="text-align: right;" id="totalAmt">$0</td>
            <td></td>
        </tr>
    </thead>
</table>
</div>

<div class="filter-controls mb-3 d-flex justify-content-between align-items-center flex-wrap">
    <div>
        <button id="exportExcel" class="btn btn-success mb-2">Export Filtered List to Excel</button>
    </div>
    <div>
        <a href="/NewJobs/Summary" class="btn btn-primary mb-2">Summary Report</a>
    </div>
</div>

<div class="mb-3">
    <label for="myInput" class="form-label">Start typing in the input field to search the table:</label>
    <input class="form-control" id="myInput" type="text" placeholder="Search...">
</div>


<br />
<br />

<!-- Data Table -->
<div class="scrollable-table" style="border: 1px solid #ccc;">
    <table id="myExcelTable" class="table table-striped table-hover table-bordered mb-0">

    <thead class="custom-header-list">
        <tr>
            <th>Year-Month</th>
            <th>JobID</th>
            <th>JobNum</th>
            <th>Tegre Manager</th>
            <th>Client</th>
            <th>Job</th>
            <th>Type</th>
            <th class="text-right">Amount</th>
            <th>Status</th>
            <th>Award Date</th>
        </tr>
    </thead>
    <tbody id="myTable">
        @foreach (var item in Model.ListNewJobs)
        {
            <tr data-cost="@item.Amount">
                <td>@item.myYearMonth</td>
                <td>@item.JobID</td>
                <td>@item.JobNum</td>
                <td>@item.MgrName</td>
                <td>@item.ClientName</td>
                <td>@item.JobName</td>
                <td>@item.ProjectTypeDesc</td>
                <td class="text-right">@String.Format("{0:C0}", item.Amount)</td>
                <td>@item.Status</td>
                <td>@item.AwardDate.ToString("dd-MMM-yy")</td>
            </tr>
        }
    </tbody>
</table>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // --- CHART ---
        const ctx = document.getElementById('jobsChart').getContext('2d');
            const labels = @Html.Raw(Json.Serialize(Model.ListNewJobsByMonthRolling.Select(x => x.myYearMonth)));
            const origData = @Html.Raw(Json.Serialize(Model.ListNewJobsByMonthRolling.Select(x => x.MonthlyOrigAmt)));
            const changeData = @Html.Raw(Json.Serialize(Model.ListNewJobsByMonthRolling.Select(x => x.MonthlyChangeAmt)));
            const targetData = @Html.Raw(Json.Serialize(Model.ListNewJobsByMonthRolling.Select(x => x.MonthlyTarget)));

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        { label: 'Original Amount', data: origData, backgroundColor: 'rgba(128, 128, 128, 0.8)' },
                        { label: 'Change Amount', data: changeData, backgroundColor: 'rgba(255, 165, 0, 0.8)' },
                        {
                            type: 'line',
                            label: 'Monthly Target',
                            data: targetData,
                            borderColor: 'red',
                            backgroundColor: 'red',
                            fill: false,
                            tension: 0.3,
                            yAxisID: 'y'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,  // <== important to allow custom container height
                    scales: {
                        x: { stacked: true },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            title: { display: true, text: 'Amount ($)' }
                        }
                    },
                    plugins: {
                        legend: { position: 'top' },
                        title: { display: true, text: 'Job Awards by Month vs Target' }
                    }
                },
                plugins: [{
                    id: 'custom_canvas_background_color',
                    beforeDraw: (chart) => {
                        const ctx = chart.canvas.getContext('2d');
                        ctx.save();
                        ctx.globalCompositeOperation = 'destination-over';
                        ctx.fillStyle = 'white';
                        ctx.fillRect(0, 0, chart.width, chart.height);
                        ctx.restore();
                    }
                }]
            });

            // --- FILTER & TOTAL ---
            function updateFooterTotals() {
                let totalAmt = 0;
                $("#myTable tr:visible").each(function () {
                    const cost = parseFloat($(this).data("cost")) || 0;
                    totalAmt += cost;
                });

                const searchTerm = $("#myInput").val().trim();
                const label = searchTerm
                    ? `Filtered Total for: "${searchTerm}"`
                    : "Total (no filter)";

                $("#filterSummary").text(label);
                $("#totalAmt").text("$" + totalAmt.toLocaleString(undefined, { maximumFractionDigits: 0 }));
            }

        let matchedRows = []; // store matched elements globally

        function filterTable() {
            const searchValue = $("#myInput").val().toLowerCase();
            matchedRows = [];

            $("#myTable tr").each(function () {
                const yearMonth = $(this).find("td:eq(0)").text().toLowerCase();
                const jobId = $(this).find("td:eq(1)").text().toLowerCase();
                const jobNum = $(this).find("td:eq(2)").text().toLowerCase();
                const tegreMgr = $(this).find("td:eq(3)").text().toLowerCase();
                const clientName = $(this).find("td:eq(4)").text().toLowerCase();
                const jobName = $(this).find("td:eq(5)").text().toLowerCase();
                const myStatus = $(this).find("td:eq(7)").text().toLowerCase();

                const matches = yearMonth.includes(searchValue) ||
                                jobId.includes(searchValue) ||
                                jobNum.includes(searchValue) ||
                                tegreMgr.includes(searchValue) ||
                                clientName.includes(searchValue) ||
                                jobName.includes(searchValue) ||
                                myStatus.includes(searchValue);

                $(this).toggle(matches);

                if (matches) {
                    matchedRows.push(this); // track visible rows
                }
            });

            updateFooterTotals();

            // Force scroll container to recalc - hack to fix rendering sometimes
            const container = $('.scrollable-table');
            container.hide();
            container.show(0);
        }



            $("#myInput").on("keyup change", filterTable);
            updateFooterTotals();

            // --- EXPORT ---
        $("#exportExcel").on("click", function () {
            var table = document.getElementById("myExcelTable");
            var wb = XLSX.utils.book_new();

            // Create a shallow copy of the table
            var cloneTable = table.cloneNode(true);

            // Remove all rows from tbody
            var cloneBody = cloneTable.querySelector("tbody");
            cloneBody.innerHTML = "";

            // Append only matched rows
            matchedRows.forEach(row => {
                cloneBody.appendChild(row.cloneNode(true));
            });

            var ws = XLSX.utils.table_to_sheet(cloneTable);
            XLSX.utils.book_append_sheet(wb, ws, "FilteredData");

            var now = new Date();
            var timestamp = now.toISOString().slice(0, 19).replace(/[:T]/g, "-");
            var filename = `NewJobs_${timestamp}.xlsx`;

            XLSX.writeFile(wb, filename);
        });

        });
    </script>
}
