@page
@model ProjectPano.Pages.Stats.Map2Model
@{
    ViewData["FullWidth"] = false;
    ViewData["Title"] = "Project Map";
}

<h5 class="custom-h1">Project Map with Canada</h5>

<div id="map" style="height:650px;"></div>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
    const data = @Html.Raw(Model.ChartDataJson); // [{ StateCode, JobCount }, ...]

    Promise.all([
      fetch("https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json").then(r => r.json()),
      fetch("https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/canada.geojson").then(r => r.json())
    ]).then(([us, ca]) => {
      const combined = {
        type: "FeatureCollection",
        features: [...us.features, ...ca.features]
      };

      const locations = [];
      const z = [];
      const hovertext = [];

      combined.features.forEach(f => {
        const code = f.properties.postal || f.properties.abbreviation || f.properties.iso_3166_2; // adjust based on GeoJSON structure
        const match = data.find(d => d.StateCode === code);
        if (match) {
          locations.push(code);
          z.push(match.JobCount);
          hovertext.push(`${code}: ${match.JobCount}`);
        }
      });

      const trace = {
        type: "choroplethmapbox",
        geojson: combined,
        locations,
        z,
        text: hovertext,
        featureidkey: "properties.postal", // or appropriate field
        colorscale: [
          [0, "rgb(240,240,240)"],
          [1, "rgb(50,120,180)"]
        ],
        reversescale: true,
        zmin: 0,
        zmax: Math.max(...z),
        marker: { line: { width: 1, color: "#fff" } },
        hoverinfo: "text"
      };

      const layout = {
        mapbox: {
          style: "carto-positron",
          center: { lon: -95, lat: 55 },
          zoom: 2.5
        },
        margin: { t: 0, b: 0 }
      };

      Plotly.newPlot("map", [trace], layout, { responsive: true });
    });
</script>