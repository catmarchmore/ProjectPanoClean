@page
@using System.Text.Encodings.Web
@using System.Text.Json
@using ProjectPano
@using ProjectPano.Model
@using static ProjectPano.Model.DAL
@model ProjectPano.Pages.ETC.PMUIModel

@{
	ViewData["FullWidth"] = true;
	ViewData["Title"] = "Estimates to Complete";
    var allEmpData = Model.ListEmpGroupResources?.Any() == true ? Model.ListEmpGroupResources : new List<vwEmpGroupResources>();
    var budgetData = Model.vwBudgetActuals?.Any() == true ? Model.vwBudgetActuals : new List<vwBudgetActuals_REVISED>();
}

<h5 class="custom-h1">Estimates to Complete</h5>

<div class="d-flex align-items-end" style="gap: 20px;">
    <div>
        <label for="pmDropdown">PM:</label>
        <select id="pmDropdown" class="selectpicker form-control" data-live-search="true" asp-items="Model.PMSelectList">
            <option value="">-- Select PM --</option>
        </select>
    </div>

    <div>
        <label for="jobPMDropdown">Job:</label>
        <select id="jobPMDropdown" class="selectpicker form-control" data-live-search="true">
            <option value="">-- Select Job --</option>
        </select>
    </div>
</div>

<br/>

@* <div class="mb-4 p-3 border rounded bg-light">
    <div class="row align-items-center">
        <!-- New Resource Allocation -->
        <div class="col-md-auto mb-2 mb-md-0">
            <button id="newEtcBtn" class="btn btn-primary">New Resource Allocation</button>
        </div>

        <!-- Shift Dates Form -->
        <div class="col-md-auto mb-2 mb-md-0">
            <label class="mb-0 mr-2"><strong>Shift All ETC Dates:</strong></label>
            <div class="form-inline">
                <input type="number" id="shiftWeeksInput" class="form-control mr-2" placeholder="Weeks (+/-)" />
                <button type="button" class="btn btn-primary" id="shiftDatesBtn">Shift Dates</button>
            </div>
        </div>

        <!-- Hidden fields for job context -->
        <input type="hidden" id="currentJobId" value="@Model.thisVWJob.JobID" />
        <input type="hidden" id="currentRptWeekend" value="@Model.thisVWDiscETC.OrderByDescending(e => e.RptWeekend).Select(e => e.RptWeekend).FirstOrDefault().ToString("yyyy-MM-dd")" />

        <!-- Bulk Edit Button aligned right -->
        <div class="col text-right">
            <button type="button" class="btn btn-warning" id="openBulkEditSchedule">Bulk Edit Schedule</button>
        </div>
    </div>
</div> *@

<input type="hidden" id="jobId" value="@Model.thisVWDiscETC.FirstOrDefault()?.JobID" />

<div id="saveConfirmation" class="alert alert-success" style="display:none;" role="alert">
  Record updated successfully!
</div>


<form method="post" id="inlineEditForm">
    <table class="table table-sm table-bordered table-compact">
        <thead>
            <tr><td colspan="14"><strong>ETC Beginning: @Model.thisVWDiscETC.OrderByDescending(e => e.RptWeekend).Select(e => e.RptWeekend).FirstOrDefault().ToString("yyyy-MM-dd")</strong></td></tr>
            <tr>
                <th>Select</th>
                <th>Detail</th>
                <th>Bigtime Task Code</th>
                <th>ETC Hrs</th>
                <th>ETC Rate</th>
                <th>ETC Cost</th>
                <th>Curve</th>
                <th>Start WE</th>
                <th>Finish WE</th>
                <th>Resource Group</th>
                <th>Employee</th>
                <th>Comment</th>
                <th>Save</th>
                <th>Cancel</th>
            </tr>
        </thead>
        <tbody>
@{
    var joined = Model.thisVWDiscETC
        .Join(Model.vwBudgetActuals, etc => etc.OBID, ba => ba.OBID, (etc, ba) => new { ETC = etc, ba.DiscSort, ba.DiscDesc })
        .OrderBy(x => x.DiscSort)
        .GroupBy(x => new { x.DiscSort, x.DiscDesc });
    int i = 0;
}
@foreach (var group in joined)
{
    <tr class="table-primary">
        <td colspan="14"><strong>@group.Key.DiscDesc</strong></td>
    </tr>
    foreach (var item in group)
    {
        <tr class="editRow" data-id="@item.ETC.DiscEtcID">
            <td>
                <input type="checkbox" class="bulk-select-checkbox" value="@item.ETC.DiscEtcID" />
            </td>
            <td>
                <button type="button" class="btn btn-info btn-sm show-budget-btn"
                    data-obid="@item.ETC.OBID"
                    data-empgroupid="@item.ETC.EmpGroupID"
                    data-mytask="@item.ETC.myTask">📊</button>
            </td>

            <!-- Hidden fields -->
            <input type="hidden" name="items[@i].DiscEtcID" value="@item.ETC.DiscEtcID" />
            <input type="hidden" class="obid" name="items[@i].OBID" value="@item.ETC.OBID" />
            <input type="hidden" class="empgroupid" name="items[@i].EmpGroupID" value="@item.ETC.EmpGroupID" />
            <input type="hidden" name="RptWeekend" value="@ReportWE.GetReportWE().ToString("yyyy-MM-dd")" />

            <td>
                <input type="text" name="items[@i].myTask"
                    class="form-control form-control-sm"
                    value="@item.ETC.myTask" />
            </td>
            <td>
            <input type="number" class="form-control form-control-sm text-right etchrs @(item.ETC.ETCHrs == 0 ? "zero-value" : "")"
                name="items[@i].ETCHrs"
                value="@item.ETC.ETCHrs" />
            </td>
            <td>
                <input type="number" class="form-control form-control-sm text-right etcrate @(item.ETC.ETCRate == 0 ? "zero-value" : "")"
                    name="items[@i].ETCRate"
                    value="@item.ETC.ETCRate" />
            </td>
            <td>
                <input type="number" class="form-control form-control-sm text-right etccost @(item.ETC.ETCCost == 0 ? "zero-value" : "")"
                    name="items[@i].ETCCost"
                    value="@item.ETC.ETCCost" />
            </td>
            <td>
                <select name="items[@i].ETC.CurveID" class="form-control form-control-sm curveid">
                    <option value="">-- Select Curve --</option>
                        @foreach (var curve in Model.ListCurves)
                        {
                        var isSelected = item.ETC.CurveID == curve.CurveID ? "selected" : "";
                            @:<option value="@curve.CurveID" @isSelected>@curve.CurveName</option>
                        }
                </select>
            </td>
            <td>
                <input type="date" class="form-control form-control-sm planstart"
                    name="items[@i].PlanStartWE"
                    value="@item.ETC.PlanStartWE.ToString("yyyy-MM-dd")" />
            </td>
            <td>
                <input type="date" class="form-control form-control-sm planfinish"
                    name="items[@i].PlanFinishWE"
                    value="@item.ETC.PlanFinishWE.ToString("yyyy-MM-dd")" />
            </td>
            <td>
                <select name="items[@i].EmpGroupID"
                        class="form-control form-control-sm empgroupid">
                    <option value="">--</option>
                    @foreach (var groupItem in Model.ListResourceGroups)
                    {
                    var isSelected = item.ETC.EmpGroupID == groupItem.EmpGroupID ? "selected" : "";
                        @:<option value="@groupItem.EmpGroupID" @isSelected>@groupItem.EmpGroup</option>
                    }
                </select>
            </td>
            <td>
                <select name="items[@i].EmpID"
                        class="form-control form-control-sm empid emp-dropdown"
                        data-groupid="@item.ETC.EmpGroupID"
                        data-selected="@item.ETC.EmpID">
                    <option value="">--</option>
                </select>
            </td>
            <td>
                <input type="text" name="items[@i].ETCComment"
                    class="form-control form-control-sm etccomment"
                    value="@item.ETC.ETCComment" />
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-success save-inline-btn"
                    data-discetcid="@item.ETC.DiscEtcID">Save</button>
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-secondary cancel-edit-btn"
                    data-id="@item.ETC.DiscEtcID">Cancel</button>
            </td>
        </tr>

        i++;
    }
}
        </tbody>

        <tfoot>
            <tr class="table-secondary">
                <td colspan="3"><strong>Total</strong></td>
                <td class="text-right">
                    <strong>
                        @Model.thisVWDiscETC.Sum(x => x.ETCHrs).ToString("N2")
                    </strong>
                </td>
                <td></td>
                <td class="text-right">
                    <strong>
                        @Model.thisVWDiscETC.Sum(x => x.ETCCost).ToString("C2")
                    </strong>
                </td>
                <td colspan="8"></td>
            </tr>
        </tfoot>

    </table>
</form>

<!-- Modal for budget summary -->
<div class="modal fade" id="budgetModal" tabindex="-1" role="dialog" aria-labelledby="budgetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Budget Summary</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Budget Hrs:</strong> <span id="budgetHrs"></span></p>
                <p><strong>Spent Hrs:</strong> <span id="spentHrs"></span></p>
                <p><strong>Remaining Hrs:</strong> <span id="remainingHrs"></span></p>
            </div>
        </div>
    </div>
</div>





@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1"></script>
    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>

    <script>
        const allJobs = @Html.Raw(JsonSerializer.Serialize(Model.JobLiteList));
        console.log(allJobs);
        const budgetActuals = @Html.Raw(JsonSerializer.Serialize(Model.vwBudgetActuals));
    </script>

    <script>
        function getNextSaturday(dateStr) {
            const date = new Date(dateStr);
            const day = date.getDay(); // 0 = Sunday, 6 = Saturday
            const daysUntilSaturday = (6 - day + 7) % 7;
            date.setDate(date.getDate() + daysUntilSaturday);

            // Format YYYY-MM-DD local
            const yyyy = date.getFullYear();
            const mm = String(date.getMonth() + 1).padStart(2, '0');
            const dd = String(date.getDate()).padStart(2, '0');
            return `${yyyy}-${mm}-${dd}`;
        }

        function toggleManualRateGroup(selectedValue) {
            if (selectedValue === 'other') {
            $('#manualRateGroup').show();
            $('#etcrate').prop('readonly', false);
            } else {
            $('#manualRateGroup').hide();
            $('#etcrate').prop('readonly', true);
            }
        }

        function updateJobDropdown(selectedPM, selectedJobId = null) {
            const filteredJobs = allJobs.filter(j => j.MgrName === selectedPM);

            const $jobDropdown = $('#jobPMDropdown');
            $jobDropdown.empty();
            $jobDropdown.append($('<option>', { value: '', text: '-- Select Job --' }));

            filteredJobs.forEach(job => {
                const selected = job.JobID == selectedJobId ? 'selected' : '';
                $jobDropdown.append(`<option value="${job.JobID}" ${selected}>${job.ClientJob}</option>`);
            });

            $jobDropdown.selectpicker('refresh');
        }

        function showSaveConfirmation() {
            const confirmation = document.getElementById('saveConfirmation');
            confirmation.style.display = 'block';

            setTimeout(() => {
                confirmation.style.display = 'none';
            }, 3000); // hides after 3 seconds
            }



        var allEmpData = @Html.Raw(Model.allEmpDataJson);

        const selectedJobId = '@Model.thisVWJob?.JobID';
        const selectedPMName = '@Model.SelectedPMName';

        $(document).ready(function () {

            console.log('allJobs is array:', Array.isArray(allJobs));
            console.log(allJobs);

            // Set selected PM
            $('#pmDropdown').val(selectedPMName).selectpicker('refresh');

            if (selectedPMName) {
                updateJobDropdown(selectedPMName, selectedJobId);
            }

            $('#pmDropdown').on('change', function () {
                const selectedPM = $(this).val();
                updateJobDropdown(selectedPM);
            });

            $('#jobPMDropdown').on('change', function () {
                const jobId = $(this).val();
                const selectedPM = $('#pmDropdown').val();
                if (jobId) {
                    window.location.href = `/ETC/PMUI?jobId=${jobId}&mgrName=${encodeURIComponent(selectedPM)}`;
                }
            });

            $('.emp-dropdown').each(function () {
                const $dropdown = $(this);
                const groupId = parseInt($dropdown.data('groupid'));
                const selectedEmpId = parseInt($dropdown.data('selected'));

                const emps = allEmpData.filter(e => e.EmpGroupID === groupId);

                emps.forEach(emp => {
                    const isSelected = emp.EmpID === selectedEmpId ? 'selected' : '';
                    $dropdown.append(`<option value="${emp.EmpID}" ${isSelected}>${emp.EmpName}</option>`);
                });
            });


            // Filter employees by EmpGroupID
            $('#empGroupId').on('change', function () {
                const selectedGroupId = parseInt($(this).val());
                const filteredEmps = allEmpData.filter(e => e.EmpGroupID === selectedGroupId);

                const $empDropdown = $('#empId');
                $empDropdown.empty().append('<option value="">-- Optional --</option>');

                filteredEmps.forEach(emp => {
                    $empDropdown.append(`<option value="${emp.EmpID}">${emp.EmpName}</option>`);
                });
            });

            //save edits
            $('.save-inline-btn').on('click', function () {
                const $btn = $(this);
                const row = $btn.closest('tr');

                const dto = {
                    DiscEtcID: parseInt($btn.data('discetcid')) || 0,
                    OBID: parseInt(row.find('.obid').val()),
                    ETCHrs: parseFloat(row.find('.etchrs').val()),
                    ETCRate: parseFloat(row.find('.etcrate').val()),
                    ETCCost: parseFloat(row.find('.etccost').val()),
                    ETCComment: row.find('.etccomment').val(),
                    PlanStartWE: row.find('.planstart').val(),
                    PlanFinishWE: row.find('.planfinish').val(),
                    EmpGroupID: parseInt(row.find('.empgroupid').val()),
                    EmpID: parseInt(row.find('.empid').val()) || null,
                    RptWeekend: $('#rptWeekend').val(), // Or however you're storing the current week
                    JobID: parseInt($('#jobId').val()),  // From hidden input or outer context
                    CurveID: parseInt(row.find('.curveid').val())
                };

                fetch('?handler=AddSingleETC', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(dto)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        $btn.removeClass('btn-success').addClass('btn-secondary').text('Saved');
                        showSaveConfirmation();
                    } else {
                        alert('Save failed');
                    }
                })
                .catch(err => {
                    console.error(err);
                    alert('Server error');
                });
            });

            // //bulk schedule update  //keep this just dont need right now
            // document.getElementById("openBulkEditSchedule").addEventListener("click", function () {
            //     const selectedIds = Array.from(document.querySelectorAll(".bulk-select-checkbox:checked"))
            //         .map(cb => cb.value);

            //     if (selectedIds.length === 0) {
            //         alert("Please select at least one ETC row.");
            //         return;
            //     }

            //     // Clear required attributes on non-schedule fields
            //     ["obid", "empGroupId", "etchrs", "etcrate", "etccost"].forEach(id => {
            //     const el = document.getElementById(id);
            //     if (el) el.removeAttribute("required");
            //     });

            //     // Set modal to bulk-edit mode
            //     document.getElementById("etcModalLabel").innerText = "Bulk Edit Schedule";
            //     document.getElementById("discEtcId").value = ""; // Clear single ID
            //     document.getElementById("etcForm").dataset.bulkIds = selectedIds.join(",");

            //     // Hide unrelated fields (task info + hrs/cost)
            //     document.querySelectorAll("#etcForm .col-md-4").forEach(section => {
            //         if (!section.querySelector("legend").innerText.includes("Schedule")) {
            //             section.style.display = "none";
            //         }
            //     });

            //     // Clear existing schedule values
            //     document.getElementById("planstart").value = "";
            //     document.getElementById("planfinish").value = "";
            //     document.getElementById("curveId").value = "";

            //     $('#etcModal').modal('show');
            // });

            // document.getElementById("etcForm").addEventListener("submit", async function (e) {
            //     e.preventDefault();

            //     const form = e.target;
            //     const bulkIds = form.dataset.bulkIds?.split(",") || [];
            //     const formData = new FormData(form);
            //     const scheduleData = {
            //         DiscEtcIDs: bulkIds,
            //         PlanStartWE: formData.get("PlanStartWE"),
            //         PlanFinishWE: formData.get("PlanFinishWE"),
            //         CurveID: formData.get("CurveID")
            //     };

            //     const response = await fetch('/ETC/Index1?handler=BulkSchedule', {
            //         method: 'POST',
            //         headers: { 'Content-Type': 'application/json' },
            //         body: JSON.stringify(scheduleData)
            //     });

            //     if (response.ok) {
            //         location.reload();
            //     } else {
            //         alert("Bulk schedule update failed.");
            //     }
            // });

            // //schedule shift //keep this just dont need right now
            // document.getElementById("shiftDatesBtn").addEventListener("click", function () {
            //     const weeks = parseInt(document.getElementById("shiftWeeksInput").value);
            //     const jobId = parseInt(document.getElementById("currentJobId").value);
            //     const rptWeekend = document.getElementById("currentRptWeekend").value;

            //     if (isNaN(weeks) || weeks === 0) {
            //         alert("Please enter a non-zero number of weeks.");
            //         return;
            //     }

            //     if (!confirm(`Are you sure you want to shift ALL ETC Start/Finish dates for this job by ${weeks} week(s)?`)) return;

            //     fetch('/ETC/index1?handler=ShiftDatesByWeeks', {
            //         method: 'POST',
            //         headers: {
            //             'Content-Type': 'application/json',
            //             'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            //         },
            //         body: JSON.stringify({
            //             weeks: weeks,
            //             jobId: jobId,
            //             rptWeekend: rptWeekend
            //         })
            //     })
            //     .then(response => response.json())
            //     .then(result => {
            //         if (result.success) {
            //             alert("Dates shifted successfully.");
            //             location.reload();
            //         } else {
            //             alert("Shift failed: " + result.message);
            //         }
            //     })
            //     .catch(error => {
            //         console.error(error);
            //         alert("An error occurred while shifting dates.");
            //     });
            // });

            //etc rate calc
            function updateRateFromSelection() {
                const selectedRateType = $('#rateSelect').val();
                const selectedObid = parseInt($('#obid').val());

                const match = budgetActuals.find(t => parseInt(t.OBID) === selectedObid);
                let rateVal = null;

                if (selectedRateType === 'currrate' && match && match.CurrRate != null) {
                    rateVal = match.CurrRate;
                    $('#etcrate').val(rateVal.toFixed(2));
                    $('#rateDisplay').text(rateVal.toFixed(2));
                    $('#manualRateGroup').removeClass('d-none');
                } else if (selectedRateType === 'actrate' && match && match.ActRate != null) {
                    rateVal = match.ActRate;
                    $('#etcrate').val(rateVal.toFixed(2));
                    $('#rateDisplay').text(rateVal.toFixed(2));
                    $('#manualRateGroup').removeClass('d-none');
                } else if (selectedRateType === 'other') {
                    // Don't overwrite existing value — just show the field
                    $('#rateDisplay').text('(manual entry)');
                    $('#manualRateGroup').removeClass('d-none');
                } else {
                    $('#etcrate').val('');
                    $('#rateDisplay').text('--');
                    $('#manualRateGroup').addClass('d-none');
                }

                // ✅ Only recalculate cost if we changed the rate
                if (rateVal !== null) {
                    updateEtcCost();
                }

                console.log("Rate selected:", selectedRateType);
                console.log("CURRRATE:", match?.CurrRate);
                console.log("ACTRATE:", match?.ActRate);

            }

                // Attach handlers
                $('#rateSelect').on('change', updateRateFromSelection);
                $('#obid').on('change', updateRateFromSelection);

            //update etc cost
            $(document).on('input', '.etchrs, .etcrate', function () {
                const $row = $(this).closest('tr');

                const hrs = parseFloat($row.find('.etchrs').val()) || 0;
                const rate = parseFloat($row.find('.etcrate').val()) || 0;

                const cost = (hrs * rate).toFixed(2);
                const $costInput = $row.find('.etccost');

                $costInput.val(cost);

                $costInput.toggleClass('zero-value', parseFloat(cost) === 0);
            });

            //new button handler
            $('#newEtcBtn').on('click', function () {
                // Clear all form fields or set defaults
                $('#discEtcId').val(0); // or "" if you prefer
                $('#obid').val('');
                $('#etchrs').val('');
                $('#etcrate').val('');
                $('#etccost').val('');
                $('#etccomment').val('');
                $('#planstart').val('');
                $('#planfinish').val('');
                $('#curveId').val('');
                $('#empGroupId').val('').trigger('change');
                $('#empId').val('');
            });

            // Delete ETC button
            $('.delete-etc-btn').on('click', function () {
                const discEtcId = $(this).data('discetcid');

                if (confirm('Are you sure you want to delete this ETC?')) {
                    fetch('/ETC/PMUI?handler=DeleteETC', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(discEtcId)
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            alert('ETC deleted successfully.');
                            location.reload();
                        } else {
                            alert('Delete failed: ' + (result.message || 'Unknown error'));
                        }
                    });
                }
            });

            // Show budget modal handler
            $(".show-budget-btn").on("click", function () {
                const obid = $(this).data("obid");
                const empGroupId = $(this).data("empgroupid");
                const myTask = $(this).data("mytask");

                const match = budgetActuals.find(b => b.OBID === obid);
                const group = allEmpData.find(g => g.EmpGroupID === empGroupId);

                const groupDesc = group?.EmpResGroupDesc || "(Unknown)";
                $(".modal-title").html(`Budget Summary<br><small>${myTask}</small>`);

                if (match) {
                    const budgetHrs = match.CURRHRS || 0;
                    const spentHrs = match.BILLQTY || 0;
                    const remaining = budgetHrs - spentHrs;

                    $("#budgetHrs").text(budgetHrs.toFixed(2));
                    $("#spentHrs").text(spentHrs.toFixed(2));
                    $("#remainingHrs").text(remaining.toFixed(2));
                } else {
                    $("#budgetHrs").text("N/A");
                    $("#spentHrs").text("N/A");
                    $("#remainingHrs").text("N/A");
                }

                $("#budgetModal").modal("show");
            });
        });
    </script>
}


