@page
@model ProjectPano.Pages.Deliverables.IndexModel
@{
    ViewData["FullWidth"] = false;
    ViewData["Title"] = "Deliverables";
}

@* <button type="button" class="btn btn-sm btn-info" onclick="$('#editModal').modal('show')">Manual Modal Launch</button> *@

<br/>

<h3 class="custom-h1">Deliverables</h3>
<h5 class="custom-h1">@Model.thisVWJob.ClientNameShort - @Model.thisVWJob.JobName</h5>
<p style="font-weight:bold;"> Manager: @Model.thisVWJob.MgrName</p>

<form class="form-inline" style="gap: 15px; display: flex; flex-wrap: wrap;">
    <!-- Job Dropdown -->
    <div>
        <select id="jobDropdown" class="form-control" style="width: 300px; margin-right: 15px;">
            <option value="">-- Select Job --</option>
            @foreach (var job in Model.ListJobStatus.OrderBy(j => j.ClientJob))
            {
                var selectedText = job.jobid.ToString() == Model.thisVWJob.JobID.ToString() ? "selected" : "";
                <text>
                    <option value="@job.jobid">@job.ClientJob</option>
                </text>
            }
        </select>
    </div>

    <!-- Search Box -->
    <div style="flex-grow: 1;">
        <input class="form-control w-100" id="myInput" type="text" placeholder="Search.." />
    </div>
</form>

<br />

@* <p>Job ID received: @Model.thisVWJob.JobID</p>
<p>BudgetActuals record count: @Model.vwBudgetActuals?.Count</p>
<p>Deliverable list record count: @Model.delList?.Count</p> *@

@if (Model.delList?.Count>0)
{
    <table id="myExcelTable" class="table table-striped table-hover table-bordered">
        <thead>
            <tr class="custom-header-costrpt3">
                <th class="align-top">Disc</th>
                <th class="align-top">Code</th>
                <th class="align-top">Activity/Task</th>
                <th class="align-top">Hours</th>
                <th class="align-top">Cost</th>
                <th class="align-top">Comment</th>
                <th class="align-top">Group 1</th>
                <th class="align-top">Group 2</th>
                <th class="align-top">Group 3</th>
                <th class="align-top">Group 4</th>
                <th>Popup Modal</th>
                <th>Delete</th>
                <th>Test Edit (goes to new page)</th>
            </tr>
        </thead>
        <tbody id="myTable">
            @foreach (var item in Model.delList)
            {
                <tr data-hours="@item.DelHours" data-cost="@item.DelCost">
                    <td>@item.DISCDESC</td>
                    <td>@item.myTask</td>
                    <td>@item.DelName</td>
                    <td style="text-align: right;">@item.DelHours.ToString("N0")</td>
                    <td style="text-align: right;">@item.DelCost.ToString("C0")</td>
                    <td>@item.DelComment</td>
                    <td>@item.DelGp1</td>
                    <td>@item.DelGp2</td>
                    <td>@item.DelGp3</td>
                    <td>@item.DelGp4</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-primary edit-button" data-id="@item.DeliverableID">Edit</button>
                    </td>
                    <td>Delete TBD</td>
                    <td>
						<a href="/Deliverables/Edit?deliverableId=@item.DeliverableID" class="btn btn-warning">
							<span class="glyphicon glyphicon-pencil"></span> edit test
						</a>
					</td>
                </tr>
            }
        </tbody>

        <tfoot>
            <tr style="font-weight: bold; background-color: #f5f5f5;">
                <td colspan="3">Total</td>
                <td style="text-align: right;" id="totalHours">0</td>
                <td style="text-align: right;" id="totalCost">0</td>
                <td colspan="8"></td>
            </tr>
        </tfoot>
    </table>
}
else
{
    <p style="margin-top: 20px;"><em>Select a job to see deliverables.</em></p>
}

<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <form id="editForm" method="post">
                <div class="modal-header">
                    <h4 class="modal-title" id="editModalLabel">Edit Deliverable</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <input type="hidden" id="editDeliverableID" />
                    <input type="hidden" id="editOBID" />
                    <input type="hidden" id="editJobID" />
                    <input type="hidden" id="editDelCost" />

                    <div class="row">
                        <div class="col-md-6">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Required</legend>

                                <div class="form-group">
                                    <label for="editDelName">Name</label>
                                    <input type="text" id="editDelName" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editDelHours">Hours</label>
                                    <input type="number" step="0.01" id="editDelHours" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editPlanStartDate">Plan Start</label>
                                    <input type="date" id="editPlanStartDate" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editPlanFinishDate">Plan Finish</label>
                                    <input type="date" id="editPlanFinishDate" class="form-control" />
                                </div>
                            </fieldset>
                        </div>

                        <div class="col-md-6">
                            <fieldset class="styled-fieldset optional-fieldset">
                                <legend class="styled-legend text-muted">Optional</legend>

                                <div class="form-group">
                                    <label for="editDelComment">Comment</label>
                                    <textarea id="editDelComment" class="form-control"></textarea>
                                </div>

                                <div class="form-group">
                                    <label for="editDelNum">Document Number</label>
                                    <input type="text" id="editDelNum" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editDelRev">Revision</label>
                                    <input type="text" id="editDelRev" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editDelGp1">Group 1</label>
                                    <input type="text" id="editDelGp1" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editDelGp2">Group 2</label>
                                    <input type="text" id="editDelGp2" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editDelGp3">Group 3</label>
                                    <input type="text" id="editDelGp3" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="editDelGp4">Group 4</label>
                                    <input type="text" id="editDelGp4" class="form-control" />
                                </div>
                            </fieldset>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="saveDeliverable()">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>



<!-- Toast Notification -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055;">
    <div id="updateToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <strong class="me-auto">Update Successful</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Deliverable was updated.
        </div>
    </div>
</div>



@section Scripts {
    <!-- Select2 CSS/JS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

     <script>
            // Export filtered visible rows to XLSX
        $("#exportExcel").on("click", function() {
            var table = document.getElementById("myExcelTable");
            var wb = XLSX.utils.book_new();

            // Clone the table so we can remove hidden rows before exporting
            var cloneTable = table.cloneNode(true);

            // Remove rows that are hidden by your filter (display:none)
            var rows = cloneTable.querySelectorAll("tbody tr");
            rows.forEach((row) => {
                if (row.style.display === "none") {
                    row.remove();
                }
            });

            // Convert cleaned table to worksheet
            var ws = XLSX.utils.table_to_sheet(cloneTable);

            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(wb, ws, "FilteredData");

            // Generate a timestamp like 2025-06-07_15-45-32
            var now = new Date();
            var timestamp = now.toISOString().slice(0, 19).replace(/[:T]/g, "-");
            var filename = `FilteredProjects_${timestamp}.xlsx`;

            // Export workbook to XLSX file
            XLSX.writeFile(wb, filename);

        });
    </script>

    <script>
        $(document).ready(function() {
        function filterTable() {
            var searchValue = $("#myInput").val().toLowerCase();

            $("#myTable tr").filter(function() {
                var rowText = $(this).text().toLowerCase();

                var matchesSearch = rowText.indexOf(searchValue) > -1;

                $(this).toggle(matchesSearch);
            });

            updateFooterTotals(); // 👈 Recalculate based on visible rows
        }

        $("#myInput").on("keyup", filterTable);
        });

            function updateFooterTotals() {
            let totalHours = 0;
            let totalCost = 0;

            $("#myTable tr:visible").each(function () {
                const hours = parseFloat($(this).data("hours")) || 0;
                const cost = parseFloat($(this).data("cost")) || 0;

                totalHours += hours;
                totalCost += cost;
            });

            $("#totalHours").text(totalHours.toLocaleString());
            $("#totalCost").text("$" + totalCost.toLocaleString(undefined, { maximumFractionDigits: 0 }));
        }

    </script>

    <script>
        $(document).ready(function () {
            $('#jobDropdown').select2({
                placeholder: "Select a job...",
                allowClear: true,
                width: 'resolve'
            });

        $('#jobDropdown').on('change', function () {
            const selectedJobId = $(this).val();
            if (selectedJobId) {
                // Redirect to same page with jobId as query parameter
                window.location.href = `/Deliverables?jobId=${selectedJobId}`;
            }
        });

        });
    </script>

    <script>
        $(document).ready(function () {
            // Edit button click handler
            $('.edit-button').on('click', function () {
                const deliverableId = $(this).data('id');
                console.log("Clicked deliverable ID:", deliverableId);

        $.get('/Deliverables?handler=GetDeliverable', { deliverableId: deliverableId }, function (data) {
            console.log("Returned deliverable:", data);

            $('#editModal').on('shown.bs.modal', function () {
                $('#editDeliverableID').val(data.DeliverableID);
                $('#editOBID').val(data.OBID);
                $('#editJobID').val(data.JobID);
                $('#editDelNum').val(data.DelNum || '');
                $('#editDelName').val(data.DelName || '');
                $('#editDelHours').val(data.DelHours);
                $('#editDelCost').val(data.DelCost);
                $('#editDelComment').val(data.DelComment || '');
                $('#editPlanStartDate').val(data.PlanStartDate);
                $('#editPlanFinishDate').val(data.PlanFinishDate);
                $('#editDelRev').val(data.DelRev || '');
                $('#editDelGp1').val(data.DelGp1 || '');
                $('#editDelGp2').val(data.DelGp2 || '');
                $('#editDelGp3').val(data.DelGp3 || '');
                $('#editDelGp4').val(data.DelGp4 || '');
                $('#editDelName').focus();
            });

            $('#editModal').modal('show');
        })
        .fail(function (xhr, status, error) {
            console.error("Error loading deliverable:", error, xhr.responseText);
        });

            });

            // Save changes handler
            $('#editForm').on('submit', function (e) {
                e.preventDefault();
                const startVal = $('#editPlanStartDate').val().trim();
                const finishVal = $('#editPlanFinishDate').val().trim();

                const startDateIso = startVal ? new Date(startVal).toISOString() : null;
                const finishDateIso = finishVal ? new Date(finishVal).toISOString() : null;


                const updatedDeliverable = {
                    DeliverableID: $('#editDeliverableID').val(),
                    OBID: parseInt($('#editOBID').val()) || 0,
                    JobID: parseInt($('#editJobID').val()) || 0,
                    DelNum: $('#editDelNum').val(),
                    DelName: $('#editDelName').val(),
                    DelHours: parseFloat($('#editDelHours').val()) || 0,
                    DelCost: parseFloat($('#editDelCost').val()) || 0,
                    DelComment: $('#editDelComment').val(),
                    PlanStartDate: startVal ? new Date(startVal).toISOString() : null,
                    PlanFinishDate: finishVal ? new Date(finishVal).toISOString() : null,
                    DelRev: $('#editDelRev').val(),
                    DelGp1: $('#editDelGp1').val(),
                    DelGp2: $('#editDelGp2').val(),
                    DelGp3: $('#editDelGp3').val(),
                    DelGp4: $('#editDelGp4').val()
                };
                console.log("Sending this deliverable:", updatedDeliverable);

                $.ajax({
                    type: 'POST',
                    url: '/Deliverables?handler=UpdateDeliverable',
                    contentType: 'application/json',
                    data: JSON.stringify(updatedDeliverable),
                    success: function () {
                        $('#editModal').modal('hide');
                        location.reload(); // Refresh page or replace with partial update
                    },
                    error: function (xhr, status, error) {
                        console.error("Update error:", error, xhr.responseText);
                        alert("Update failed.");
                    }
                });
            });
        });
    </script>


    <script>
        console.log('Bootstrap Modal Active:', typeof $.fn.modal !== 'undefined');
    </script>

    <script>
            function emptyToNull(value) {
            return value === "" ? null : value;
        }

        const data = {
            DeliverableID: parseInt($('#editDeliverableID').val()),
            OBID: parseInt($('#editOBID').val()),
            JobID: parseInt($('#editJobID').val()),
            DelNum: emptyToNull($('#editDelNum').val()),
            DelName: emptyToNull($('#editDelName').val()),
            DelHours: parseFloat($('#editDelHours').val()),
            DelCost: parseFloat($('#editDelCost').val()),
            DelComment: emptyToNull($('#editDelComment').val()),
            PlanStartDate: emptyToNull($('#editPlanStartDate').val()),
            PlanFinishDate: emptyToNull($('#editPlanFinishDate').val()),
            DelRev: emptyToNull($('#editDelRev').val()),
            DelGp1: emptyToNull($('#editDelGp1').val()),
            DelGp2: emptyToNull($('#editDelGp2').val()),
            DelGp3: emptyToNull($('#editDelGp3').val()),
            DelGp4: emptyToNull($('#editDelGp4').val())
        };


        function saveDeliverable() {
            const data = {
        DeliverableID: parseInt($('#editDeliverableID').val()),
        OBID: parseInt($('#editOBID').val()),
        JobID: parseInt($('#editJobID').val()),
        DelNum: emptyToNull($('#editDelNum').val()),
        DelName: emptyToNull($('#editDelName').val()),
        DelHours: parseFloat($('#editDelHours').val()),
        DelCost: parseFloat($('#editDelCost').val()),
        DelComment: emptyToNull($('#editDelComment').val()),
        PlanStartDate: emptyToNull($('#editPlanStartDate').val()),
        PlanFinishDate: emptyToNull($('#editPlanFinishDate').val()),
        DelRev: emptyToNull($('#editDelRev').val()),
        DelGp1: emptyToNull($('#editDelGp1').val()),
        DelGp2: emptyToNull($('#editDelGp2').val()),
        DelGp3: emptyToNull($('#editDelGp3').val()),
        DelGp4: emptyToNull($('#editDelGp4').val())
            };
            console.log(data.PlanStartDate);
            console.log("Prepared data to send:", data);
            console.log("Sending deliverable:", data);
        console.log("---- DTO DUMP ----");
        console.log("DeliverableID:", data.DeliverableID);
        console.log("OBID:", data.OBID);
        console.log("JobID:", data.JobID);
        console.log("DelNum:", data.DelNum);
        console.log("DelName:", data.DelName);
        console.log("DelHours:", data.DelHours);
        console.log("DelCost:", data.DelCost);
        console.log("DelComment:", data.DelComment);
        console.log("PlanStartDate:", data.PlanStartDate);
        console.log("PlanFinishDate:", data.PlanFinishDate);
        console.log("DelRev:", data.DelRev);
        console.log("DelGp1:", data.DelGp1);
        console.log("DelGp2:", data.DelGp2);
        console.log("DelGp3:", data.DelGp3);
        console.log("DelGp4:", data.DelGp4);



            fetch('?handler=UpdateDeliverable', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(async response => {
                const text = await response.text();

                let json = null;
                try {
                    json = text ? JSON.parse(text) : {};
                } catch (e) {
                    console.warn("Non-JSON response from server");
                }

                if (!response.ok) {
                    console.error("Request failed:", response.status, json);
                    alert("Update failed: " + (json?.message || response.statusText));
                    return;
                }

                if (json?.success) {
                    $('#editModal').modal('hide');
                    location.reload(); // or dynamically refresh just the updated row
                } else {
                    console.error("Update failed:", json);
                    alert("Update failed: " + (json?.message || "Unknown server error"));
                }
            })
            .catch(error => {
                console.error("Fetch error:", error);
                alert("Network or server error occurred.");
            });
        }
    </script>




}



