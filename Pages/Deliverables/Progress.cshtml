@page
@using System.Linq
@using System.Text.Json
@using ProjectPano
@using ProjectPano.Model
@using static ProjectPano.Model.DAL
@model ProjectPano.Pages.Deliverables.ProgressModel

@{
    ViewData["FullWidth"] = true;
    ViewData["Title"] = "Assign Progress";
}

<a href="/Deliverables/Options">Back</a>
<br />
<br />

<h5 class="custom-h1">Assign Progress</h5>

<div class="d-flex align-items-center mb-2">
    <label for="jobDropdown" style="margin-right: 25px;">Pick Job:</label>
    <select id="jobDropdown" class="selectpicker form-control" data-live-search="true"
            style="width:700px;" asp-for="JobId" asp-items="Model.JobSelectList">
        <option value="">-- Select job --</option>
    </select>

    @if (Model.ProgressDateSelectList != null)
    {
        <label class="ms-4 me-2">Progress Date:</label>
        <select id="progressDropdown" class="form-control" asp-for="ProgressDate" asp-items="Model.ProgressDateSelectList">
            <option value="">-- Select date --</option>
        </select>
    }
</div>
<br />
<br />

<button type="button" class="btn btn-sm btn-success" data-toggle="modal" data-target="#deliverableModal">
    Add New Activity/Deliverable
</button>

@if (Model.Deliverables.Any())
{
    <form method="post">
        <div class="mb-2">
            <input type="text" id="filterBox" placeholder="Filter..." class="form-control" style="max-width: 300px;" />
        </div>

        <table class="table table-sm" id="deliverablesTable">
            <thead>
                <tr>
                    <th></th>
                    <th>Direct</th>
                    <th>Task</th>
                    <th>Name</th>
                    <th>Hours</th>
                    <th>Cost</th>
                    <th>Cumul<br />% Complete</th>
                    <th>Comment</th>
                    <th>Earned Cost</th>
                    <th>TASK HRS</th>
                    <th>TASK COST</th>
                    <th>DirPct</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Deliverables.Count; i++)
                {
                    var d = Model.Deliverables[i];
                    <tr>
                        <!-- Edit -->
                        <td>
                            <button type="submit" name="editId" value="@d.DeliverableID" class="btn btn-sm btn-secondary">Edit</button>
                        </td>

                        <td><input asp-for="Deliverables[@i].Direct" type="checkbox" /></td>

                        @* <td>@d.myTask<input type="hidden" asp-for="Deliverables[@i].DeliverableID" /></td> *@

                        <td>
                            <select class="form-control" asp-for="Deliverables[@i].OBID">
                                <option value="">-- Select Task --</option>
                                @foreach (var task in Model.vwBudgetActuals)
                                {
                                    <option value="@task.OBID" selected="@(task.OBID == d.OBID)">
                                        @task.MYTASK
                                    </option>
                                }
                            </select>
                            <input type="hidden" asp-for="Deliverables[@i].DeliverableID" />
                            <input type="hidden" asp-for="Deliverables[@i].myTask"
                                   value="@Model.vwBudgetActuals.FirstOrDefault(t => t.OBID == d.OBID)?.MYTASK" />
                            <!-- ✅ Hidden MYTASK column for search -->
                            <span class="search-mytask" style="display:none;">
                                @Model.vwBudgetActuals.FirstOrDefault(t => t.OBID == d.OBID)?.MYTASK
                            </span>
                        </td>

                        <td><input asp-for="Deliverables[@i].DelName" class="form-control" /></td>

                        <td>
                            <input asp-for="Deliverables[@i].DelHours"
                                   class="form-control text-end delHrs" />
                        </td>

                        <td>
                            <input type="hidden" asp-for="Deliverables[@i].DelCost"
                                   class="delCost" />
                            <input type="text" class="form-control text-end delCostDisplay" readonly />
                        </td>

                        <td>
                            <!-- Visible % Complete (0–100) -->
                            <input type="number"
                                   class="form-control text-end pctInput"
                                   min="0"
                                   max="100"
                                   step="1"
                                   value="@(d.DelPctCumul * 100)"
                                   @(d.Direct == false ? "disabled" : "") />

                            <!-- Hidden decimal value for posting -->
                            <input type="hidden"
                                   class="pctHidden"
                                   asp-for="Deliverables[@i].DelPctCumul" />
                        </td>

                        <td><input asp-for="Deliverables[@i].DelComment" class="form-control" /></td>

                        <td>
                            <!-- Visible earned cost, updates via JS -->
                            @* <input type="text" class="form-control text-end earnedCost" readonly value="@(d.DelCost* d.DelPctCumul).ToString(" F2")" /> *@
                            <input type="text" class="form-control earnedCost text-end" readonly /> <!-- Earned Cost -->
                            <input type="hidden" asp-for="Deliverables[@i].DelEarnedCost" value="@(d.DelCost* d.DelPctCumul)" />
                        </td>

                        <td>
                            <input asp-for="Deliverables[@i].CURRHRS"
                                   class="form-control text-end budgetHrs"
                                   readonly />
                        </td>
                        <td>
                            <input asp-for="Deliverables[@i].CURRCOST"
                                   class="form-control text-end budgetCost"
                                   readonly />
                        </td>

                        <td>DIRPCT</td>

                        <!-- Delete Button -->
                        <td>
                            <button type="submit" name="deleteId" value="@d.DeliverableID" class="btn btn-sm btn-danger">Delete</button>
                        </td>

                        <input type="hidden" asp-for="Deliverables[@i].DelEarnedHrs" value="@(d.DelHours* d.DelPctCumul)" />
                    </tr>
                }
            </tbody>

            <tfoot class="fw-bold">
                <tr>
                    <td colspan="4" class="text-end">Totals:</td>
                    <td id="totalHours" class="text-end">0</td>
                    <td id="totalCost" class="text-end">0</td>
                    <td id="totalCumulPct" class="text-end">0%</td>
                    <td></td>
                    <td id="totalEarnedCost" class="text-end">0</td>
                    <td></td>
                    <td></td>
                    <td id="dirPctFooter" class="text-end">0%</td>
                </tr>
            </tfoot>

        </table>
        <input type="hidden" asp-for="DirPct" id="dirPctInput" />

        <button type="submit" class="btn btn-primary">Save</button>
    </form>
}

<!-- Modal popup for new item -->
<div id="deliverableModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="deliverableModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content p-4">
            <div class="modal-header">
                <h4 class="modal-title" id="deliverableModalLabel">Add New Deliverable</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <form method="post" asp-page-handler="AddNew">
                <input type="hidden" asp-for="NewDeliverable.JobID" value="@Model.JobId" />
                <input type="hidden" asp-for="NewDeliverable.ProgressDate" value="@Model.ProgressDate?.ToString("yyyy-MM-dd")" />

                <div class="modal-body">
                    <div class="row">
                        <!-- Task/Name -->
                        <div class="col-md-4">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Task / Name</legend>

                                <div class="form-group form-check">
                                    <input type="checkbox" class="form-check-input" id="direct" name="NewDeliverable.Direct" value="true" checked />
                                    <label class="form-check-label" for="direct">Direct</label>
                                </div>

                                <div class="form-group">
                                    <label for="obid">Task</label>
                                    <select class="form-control" id="obid" name="NewDeliverable.OBID" required>
                                        <option value="">-- Select Task --</option>
                                        @foreach (var task in Model.vwBudgetActuals)
                                        {
                                            <option value="@task.OBID">@task.MYTASK</option>
                                        }
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="delName">Deliverable Name</label>
                                    <input type="text" class="form-control" id="delName" name="NewDeliverable.DelName" />
                                </div>
                            </fieldset>
                        </div>

                        <!-- Budget -->
                        <div class="col-md-4">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Budget</legend>

                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="direct" name="NewDeliverable.Direct" value="true" checked />
                                    <label class="form-check-label" for="direct">Direct</label>
                                    <input type="hidden" name="NewDeliverable.Direct" value="false" />
                                </div>

                                <div class="form-group">
                                    <label for="delHours">Hours</label>
                                    <input type="number" class="form-control text-right" id="delHours" name="NewDeliverable.DelHours" step="0.01" />
                                </div>

                                <div class="form-group">
                                    <label for="delCost">Cost</label>
                                    <input type="number" class="form-control text-right" id="delCost" name="NewDeliverable.DelCost" step="0.01" readonly />
                                </div>
                            </fieldset>
                        </div>

                        <!-- Progress -->
                        <div class="col-md-4">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Progress</legend>

                                <div class="form-group">
                                    <label for="delPctCumul">% Complete</label>
                                    <input type="number" class="form-control text-right" id="delPctCumul" name="NewDeliverable.DelPctCumul" step="0.01" />
                                </div>

                                <div class="form-group">
                                    <label for="delComment">Comment</label>
                                    <textarea class="form-control" id="delComment" name="NewDeliverable.DelComment" rows="2"></textarea>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(function () {
            // --- Dropdowns ---
            $('#jobDropdown').selectpicker();
            $('#progressDropdown').selectpicker();

            $('#jobDropdown').on('changed.bs.select', function () {
                const jobId = $(this).val();
                if (jobId) {
                    window.location.href = `/Deliverables/Progress?jobId=${jobId}`;
                }
            });

            $('#progressDropdown').on('changed.bs.select', function () {
                const progressDate = $(this).val();
                const jobId = $('#jobDropdown').val();
                if (progressDate && jobId) {
                    window.location.href = `/Deliverables/Progress?jobId=${jobId}&progressDate=${progressDate}`;
                }
            });

            // --- Totals and DirPct calculation ---
        function recalcTotals() {
            let totalHours = 0, totalCost = 0, totalEarnedHrs = 0, totalEarnedCost = 0;
            let dirEarned = 0, dirCost = 0;

            // --- First pass: calculate DirPct across all direct=1 rows (ignore filtering) ---
            $("#deliverablesTable tbody tr").each(function () {
                if ($(this).find("button[name='addNew']").length) return;

                const isDirect = $(this).find("input[type='checkbox']").prop("checked");
                const cost = parseFloat($(this).find("input[name*='DelCost']").val()) || 0;
                const pctInput = parseFloat($(this).find(".pctInput").val()) || 0;
                const pct = pctInput / 100;

                if (isDirect) {
                    dirCost += cost;
                    dirEarned += cost * pct;
                }
            });

            const dirPct = dirCost === 0 ? 0 : dirEarned / dirCost;
            $("#dirPctFooter").text((dirPct * 100).toFixed(1) + "%");
            $("#dirPctInput").val(dirPct);

            // --- Second pass: calculate totals for visible rows & update earned values ---
            $("#deliverablesTable tbody tr:visible").each(function () {
                if ($(this).find("button[name='addNew']").length) return;

                const hrs = parseFloat($(this).find("input[name*='DelHours']").val()) || 0;
                const cost = parseFloat($(this).find("input[name*='DelCost']").val()) || 0;
                const isDirect = $(this).find("input[type='checkbox']").prop("checked");

                // For direct rows, use user input; for non-direct, override with dirPct
                let pctInput = parseFloat($(this).find(".pctInput").val()) || 0;
                const pct = isDirect ? pctInput / 100 : dirPct;

                // Update visible % Complete field
                $(this).find(".pctInput").val((pct * 100).toFixed(0));

                const earnedHrs = hrs * pct;
                const earnedCost = cost * pct;

                $(this).find(".earnedHrs").val(earnedHrs.toFixed(2));
                $(this).find(".earnedCost").val(earnedCost.toFixed(2));
                $(this).find(".pctHidden").val(pct); // hidden field for posting

                // Add to totals for visible rows
                totalHours += hrs;
                totalCost += cost;
                totalEarnedHrs += earnedHrs;
                totalEarnedCost += earnedCost;
            });

            // --- Update footer totals ---
            $("#totalHours").text(totalHours.toFixed(2));
            $("#totalCost").text(totalCost.toFixed(2));
            $("#totalEarnedHrs").text(totalEarnedHrs.toFixed(2));
            $("#totalEarnedCost").text(totalEarnedCost.toFixed(2));
            $("#totalCumulPct").text(totalCost === 0 ? "0%" : ((totalEarnedCost / totalCost) * 100).toFixed(1) + "%");

            checkBudgetMatch();
            checkBudgetConsistency();
        }

        function checkBudgetMatch() {
            let obidTotals = {};

            // Gather sums by OBID/MyTask
            $("#deliverablesTable tbody tr").each(function () {
                if ($(this).find("button[name='addNew']").length) return;

                const obid = $(this).find("input[name*='OBID']").val();
                const myTask = $(this).find("input[name*='MYTASK']").val();
                const hrs = parseFloat($(this).find("input[name*='DelHours']").val()) || 0;
                const cost = parseFloat($(this).find("input[name*='DelCost']").val()) || 0;

                const key = obid + "|" + myTask;
                if (!obidTotals[key]) {
                    obidTotals[key] = { hrs: 0, cost: 0, budgetHrs: 0, budgetCost: 0, rows: [] };
                }
                obidTotals[key].hrs += hrs;
                obidTotals[key].cost += cost;
                obidTotals[key].rows.push(this);

                // assume hidden budget fields per row
                obidTotals[key].budgetHrs = parseFloat($(this).find(".budgetHrs").val()) || 0;
                obidTotals[key].budgetCost = parseFloat($(this).find(".budgetCost").val()) || 0;
            });

            // Compare & flag
            for (let key in obidTotals) {
                const totals = obidTotals[key];

                const hrsMatch = Math.abs(totals.hrs - totals.budgetHrs) < 0.01;
                const costMatch = Math.abs(totals.cost - totals.budgetCost) < 0.01;

                totals.rows.forEach(row => {
                    const hrsInput = $(row).find("input[name*='DelHours']");
                    const costInput = $(row).find("input[name*='DelCost']");

                    hrsInput.toggleClass("text-danger", !hrsMatch);
                    costInput.toggleClass("text-danger", !costMatch);
                });
            }
        }

        function checkBudgetConsistency() {
            let taskTotals = {};

            // --- Sum deliverables per OBID ---
            $("#deliverablesTable tbody tr").each(function () {
                if ($(this).find("button[name='addNew']").length) return;

                const obid = $(this).find("select[name*='OBID']").val();
                if (!obid) return;

                const hrs = parseFloat($(this).find(".delHrs").val()) || 0;
                const cost = parseFloat($(this).find(".delCost").val()) || 0;

                if (!taskTotals[obid]) {
                    taskTotals[obid] = { hrs: 0, cost: 0, rows: [] };
                }
                taskTotals[obid].hrs += hrs;
                taskTotals[obid].cost += cost;
                taskTotals[obid].rows.push($(this));
            });

            // --- Compare to budget per OBID ---
            for (let obid in taskTotals) {
                const data = taskTotals[obid];

                data.rows.forEach(row => {
                    const budgetHrs = parseFloat(row.find(".budgetHrs").val()) || 0;
                    const budgetCost = parseFloat(row.find(".budgetCost").val()) || 0;

                    // Flag mismatch
                    const hrsMismatch = data.hrs !== budgetHrs;
                    const costMismatch = data.cost !== budgetCost;

                    row.find(".delHrs, .budgetHrs").toggleClass("text-danger", hrsMismatch);
                    row.find(".delCost, .budgetCost").toggleClass("text-danger", costMismatch);
                });
            }
        }

        function bindAutoCostCalc() {
            $("#deliverablesTable").on("input", ".delHrs", function () {
                const row = $(this).closest("tr");
                const hrs = parseFloat($(this).val()) || 0;
                const budgetHrs = parseFloat(row.find(".budgetHrs").val()) || 0;
                const budgetCost = parseFloat(row.find(".budgetCost").val()) || 0;

                const rate = budgetHrs === 0 ? 0 : budgetCost / budgetHrs;
                const newCost = hrs * rate;

                // update both display + hidden
                row.find(".delCost").val(newCost.toFixed(2));
                row.find(".delCostDisplay").val(newCost.toFixed(2));

                recalcTotals(); // trigger consistency + totals check
            });
        }


        function bindNewRowAutoCalc() {
            $("#newDelHrs").on("input", function () {
                const hrs = parseFloat($(this).val()) || 0;
                const budgetHrs = parseFloat($("#newBudgetHrs").val()) || 0;
                const budgetCost = parseFloat($("#newBudgetCost").val()) || 0;

                const rate = budgetHrs === 0 ? 0 : budgetCost / budgetHrs;
                const newCost = hrs * rate;

                $("#newDelCost").val(newCost.toFixed(2));
                $("#newDelCostDisplay").val(newCost.toFixed(2));

                recalcTotals(); // keep consistency check live
            });
        }

        //stuff for modal
                // preload budget info into a JS object
        var budgetData = {
            @foreach (var task in Model.vwBudgetActuals)
            {
                    <text>
                    "@task.OBID": { currhrs: @task.CURRHRS, currcost: @task.CURRCOST },
                    </text>
            }
        };

        function recalcDelCost() {
            var obid = document.getElementById("obid").value;
            var hrs = parseFloat(document.getElementById("delHours").value) || 0;

            if (obid && budgetData[obid]) {
                var currhrs = budgetData[obid].currhrs || 0;
                var currcost = budgetData[obid].currcost || 0;

                if (currhrs > 0) {
                    var cost = (hrs / currhrs) * currcost;
                    document.getElementById("delCost").value = cost.toFixed(2);
                } else {
                    document.getElementById("delCost").value = "0.00";
                }
            }
        }

        // recalc cost when OBID or hours change
        document.getElementById("obid").addEventListener("change", recalcDelCost);
        document.getElementById("delHours").addEventListener("input", recalcDelCost);


        // --- Hook up events ---
        $(document).ready(function () {
            bindAutoCostCalc();
            bindNewRowAutoCalc();
            recalcTotals();
            $("#deliverablesTable tbody input").on("input change", recalcTotals);
            // real-time filter that includes select option text + hidden inputs
            $("#filterBox").on("input", function () {
                const value = $(this).val().toLowerCase().trim();

                $("#deliverablesTable tbody tr").each(function () {
                    // skip Add New row
                    if ($(this).find("button[name='addNew']").length) return;

                    let rowTextParts = [];

                    // iterate each cell and pick the best searchable text:
                    $(this).find("td").each(function () {
                    const $cell = $(this);

                    // 1) if there's a select, use selected option text
                    const $select = $cell.find("select");
                    if ($select.length) {
                        rowTextParts.push($select.find("option:selected").text() || "");
                        return; // next td
                    }

                    // 2) if there are inputs (including hidden), add their values
                    const $inputs = $cell.find("input");
                    if ($inputs.length) {
                        $inputs.each(function () {
                            rowTextParts.push($(this).val() || "");
                        });
                        return;
                    }

                    // 3) otherwise fall back to the cell text
                    rowTextParts.push($cell.text() || "");
                });

                const rowText = rowTextParts.join(" ").toLowerCase();
                $(this).toggle(rowText.indexOf(value) !== -1);
            });

            recalcTotals();
        });
        });

        // Run budget check whenever hours or cost are edited
        $(document).on("input", "input[name*='DelHours'], input[name*='DelCost']", function () {
            checkBudgetMatch();
        });


        });
    </script>
}
