@page
@using System.Linq
@using System.Text.Json
@using ProjectPano
@using ProjectPano.Model
@using static ProjectPano.Model.DAL
@model ProjectPano.Pages.Deliverables.ProgressModel

@{
    ViewData["FullWidth"] = true;
    ViewData["Title"] = "Assign Progress";
}

<a href="/Deliverables/Options">Back</a>
<br />
<br />

<h5 class="custom-h1">Assign Progress</h5>

<div class="d-flex align-items-center mb-2">
    <label for="jobDropdown" style="margin-right: 15px;">Pick Job:</label>
    <select id="jobDropdown" class="selectpicker form-control" data-live-search="true"
            style="width:250px;" asp-for="JobId" asp-items="Model.JobSelectList">
        <option value="">-- Select job --</option>
    </select>

    @if (Model.ProgressDateSelectList != null)
    {
        <label class="ms-3 me-2">Progress Date:</label>
        <select id="progressDropdown" class="form-control" style="width:150px;" asp-for="ProgressDate" asp-items="Model.ProgressDateSelectList">
            <option value="">-- Select date --</option>
        </select>

        <!-- Copy to new WE inline form -->
        <form method="post" asp-page-handler="CopyProgress" class="d-flex align-items-center ms-3">
           @*  <input type="hidden" name="SelectedDateFrom" value="@Model.ProgressDate?.ToString("o")" /> *@
            <input type="hidden" name="JobId" value="@Model.JobId" />
            <input type="hidden" name="SelectedDateFrom" value="@Model.ProgressDate?.ToString("yyyy-MM-dd")" />


            <label class="me-2 mb-0">Copy to:</label>
            <input type="date" name="SelectedDateTo" class="form-control form-control-sm me-2" required />

            <button type="submit" class="btn btn-sm btn-info">Copy This RecordSet to New WE</button>
        </form>
    }
</div>


<br />

<button type="button" class="btn btn-sm btn-success" data-toggle="modal" data-target="#deliverableModal">
    Add New Activity/Deliverable
</button>

<br />
<br />

@if (Model.Deliverables.Any())
{
    <form method="post">
        <div class="mb-2">
            <input type="text" id="filterBox" placeholder="Filter..." class="form-control" style="max-width: 300px;" />
        </div>

        <table class="table table-sm" id="deliverablesTable">
            <thead>
                <tr>
                    <th>Direct</th>
                    <th>Task</th>
                    <th>Name</th>
                    <th>Hours</th>
                    <th>Cost</th>
                    <th>Cumul<br />% Complete</th>
                    <th>Comment</th>
                    <th>Earned Cost</th>
                    <th>TASK HRS</th>
                    <th>TASK COST</th>
                    <th>DirPct</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Deliverables.Count; i++)
                {
                    var d = Model.Deliverables[i];
                    <tr>
@*                         <!-- Edit -->
                        <td>
                            <button type="submit" name="editId" value="@d.DeliverableID" class="btn btn-sm btn-secondary">Edit</button>
                        </td> *@

                        <td><input asp-for="Deliverables[@i].Direct" type="checkbox" /></td>

                        @* <td>@d.myTask<input type="hidden" asp-for="Deliverables[@i].DeliverableID" /></td> *@

                        <td>
                            <select class="form-control" asp-for="Deliverables[@i].OBID">
                                <option value="">-- Select Task --</option>
                                @foreach (var task in Model.vwBudgetActuals)
                                {
                                    <option value="@task.OBID" selected="@(task.OBID == d.OBID)">
                                        @task.MYTASK
                                    </option>
                                }
                            </select>
                            <input type="hidden" asp-for="Deliverables[@i].DeliverableID" />
                            <input type="hidden" asp-for="Deliverables[@i].myTask"
                                   value="@Model.vwBudgetActuals.FirstOrDefault(t => t.OBID == d.OBID)?.MYTASK" />
                            <!-- ✅ Hidden MYTASK column for search -->
                            <span class="search-mytask" style="display:none;">
                                @Model.vwBudgetActuals.FirstOrDefault(t => t.OBID == d.OBID)?.MYTASK
                            </span>
                        </td>

                        <td><input asp-for="Deliverables[@i].DelName" class="form-control" /></td>

                        <td>
                            <input asp-for="Deliverables[@i].DelHours"
                                   class="form-control text-end delHrs" />
                        </td>

                        <td>
@*                             <input type="hidden" asp-for="Deliverables[@i].DelCost"
                                   class="delCost" />
                            <input type="text" class="form-control text-end delCostDisplay" readonly /> *@
                            <input asp-for="Deliverables[@i].DelCost"
                                   class="form-control text-end delCost"
                                   readonly />
                        </td>

                        <td>
                            <!-- Visible % Complete (0–100) -->
                            <input type="number"
                                   class="form-control text-end pctInput"
                                   min="0" max="100" step="1"
                                   value="@(d.DelPctCumul * 100)"
                                   @(d.Direct == false ? "disabled" : "") />

                            <!-- Hidden decimal value for posting -->
                            <input type="hidden"
                                   asp-for="Deliverables[@i].DelPctCumul"
                                   class="pctHidden" />
                        </td>

                        <td><input asp-for="Deliverables[@i].DelComment" class="form-control" /></td>

                        <td>
                            <!-- Visible earned cost, updates via JS -->
@*                             <input type="text" class="form-control earnedCost text-end" readonly /> <!-- Earned Cost -->
                            <input type="hidden" asp-for="Deliverables[@i].DelEarnedCost" value="@(d.DelCost* d.DelPctCumul)" /> *@

                            <!-- Visible earned cost -->
                            <input type="text" class="form-control earnedCostDisplay text-end" readonly />

                            <!-- Hidden earned cost bound for posting -->
                            <input type="hidden" asp-for="Deliverables[@i].DelEarnedCost"
                                   class="earnedCostHidden" />

                            <input type="hidden" asp-for="Deliverables[@i].DelEarnedHrs"
                                   class="earnedHrsHidden" />

                        </td>

                        <td>
                            <input asp-for="Deliverables[@i].CURRHRS"
                                   class="form-control text-end budgetHrs"
                                   readonly />
                        </td>
                        <td>
                            <input asp-for="Deliverables[@i].CURRCOST"
                                   class="form-control text-end budgetCost"
                                   readonly />
                        </td>

                        <td>DIRPCT</td>

                        <!-- Delete Button -->
                        <td>
                            <button type="submit" name="deleteId" value="@d.DeliverableID" class="btn btn-sm btn-danger">Delete</button>
                        </td>

                        <input type="hidden" asp-for="Deliverables[@i].DelEarnedHrs" value="@(d.DelHours* d.DelPctCumul)" />
                        <input type="hidden" name="JobId" value="@Model.JobId" />
                        @* <input type="hidden" name="ProgressDate" value="@Model.ProgressDate?.ToString("yyyy-MM-dd")" /> *@
                    </tr>
                }
            </tbody>

            <tfoot class="fw-bold">
                <tr>
                    <td colspan="3" class="text-end">Totals:</td>
                    <td id="totalHours" class="text-end">0</td>
                    <td id="totalCost" class="text-end">0</td>
                    <td id="totalCumulPct" class="text-end">0%</td>
                    <td></td>
                    <td id="totalEarnedCost" class="text-end">0</td>
                    <td></td>
                    <td></td>
                    <td id="dirPctFooter" class="text-end">0%</td>
                </tr>
            </tfoot>

        </table>
        <input type="hidden" asp-for="DirPct" id="dirPctInput" />
        @* <input type="hidden" asp-for="ProgressDate" value="@Model.ProgressDate?.ToString("yyyy-MM-dd")" /> *@
        <input type="hidden" name="ProgressDate" id="progressHidden" />

        <button type="submit" class="btn btn-primary">Save</button>
    </form>
}

<!-- Modal popup for new item -->
<div id="deliverableModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="deliverableModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content p-4">
            <div class="modal-header">
                <h4 class="modal-title" id="deliverableModalLabel">Add New Deliverable</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <form method="post" asp-page-handler="AddNew">
                <input type="hidden" name="JobId" value="@Model.JobId" />
                <input type="hidden" name="ProgressDate" value="@Model.ProgressDate?.ToString("o")" />

                <input type="hidden" name="NewDeliverable.JobID" value="@Model.JobId" />
                <input type="hidden" name="NewDeliverable.ProgressDate" value="@Model.ProgressDate?.ToString("o")" />

                <div class="modal-body">
                    <div class="row">
                        <!-- Task/Name -->
                        <div class="col-md-4">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Task / Name</legend>

                                <div class="form-group">
                                    <label for="obid">Task</label>
                                    <select class="form-control" id="obid" name="NewDeliverable.OBID" required>
                                        <option value="">-- Select Task --</option>
                                        @foreach (var task in Model.vwBudgetActuals)
                                        {
                                            <option value="@task.OBID">@task.MYTASK</option>
                                        }
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="delName">Deliverable Name</label>
                                    <input type="text" class="form-control" id="delName" name="NewDeliverable.DelName" />
                                </div>
                            </fieldset>
                        </div>

                        <!-- Budget -->
                        <div class="col-md-4">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Budget</legend>

@*                                 <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="direct" name="NewDeliverable.Direct" value="true" checked />
                                    <label class="form-check-label" for="direct">Direct</label>
                                    <input type="hidden" name="NewDeliverable.Direct" value="false" />
                                </div> *@

                                <div class="form-group form-check">
                                   @*  <input type="hidden" name="NewDeliverable.Direct" value="false" /> *@
                                    <input type="checkbox" class="form-check-input" id="direct" name="NewDeliverable.Direct" value="true" checked />
                                    <label class="form-check-label" for="direct">Direct</label>
                                </div>

                                <div class="form-group">
                                    <label for="delHours">Hours</label>
                                    <input type="number" class="form-control text-right" id="delHours" name="NewDeliverable.DelHours" step="0.01" value="0" />
                                </div>

                                <div class="form-group">
                                    <label for="delCost">Cost</label>
                                    @* <input type="number" class="form-control text-right" id="delCost" name="NewDeliverable.DelCost" step="0.01" readonly /> *@
                                    <!-- Visible, user can't edit -->
                                    <input type="number" class="form-control text-right"
                                           id="delCostDisplay"
                                           step="0.01"
                                           readonly />

                                    <!-- Hidden, posts actual value -->
                                    <input type="hidden" id="delCost" name="NewDeliverable.DelCost" />
                                </div>
                            </fieldset>
                        </div>

                        <!-- Progress -->
                        <div class="col-md-4">
                            <fieldset class="styled-fieldset">
                                <legend class="styled-legend-required">Progress</legend>

                                <div class="form-group">
                                    <label for="delPctCumul">% Complete</label>
                                    <input type="number" class="form-control text-right" id="delPctCumul" name="NewDeliverable.DelPctCumul" step="0.01" value="0" />
                                </div>

                                <div class="form-group">
                                    <label for="delComment">Comment</label>
                                    <textarea class="form-control" id="delComment" name="NewDeliverable.DelComment" rows="2"></textarea>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {

            // initialize hidden field from dropdown at page load
            $("#progressHidden").val($("#progressDropdown").val());

            // --- Dropdowns ---
            $('#jobDropdown').selectpicker();
            $('#progressDropdown').selectpicker();

            $('#jobDropdown').on('changed.bs.select', function () {
                const jobId = $(this).val();
                if (jobId) {
                    window.location.href = `/Deliverables/Progress?jobId=${jobId}`;
                }
            });

            $('#progressDropdown').on('changed.bs.select', function () {
                const progressDate = $(this).val();
                const jobId = $('#jobDropdown').val();
                if (progressDate && jobId) {
                    window.location.href = `/Deliverables/Progress?jobId=${jobId}&progressDate=${progressDate}`;
                }
            });

            // --- Budget data from server ---
            var budgetData = @Html.Raw(Json.Serialize(
                            Model.vwBudgetActuals.ToDictionary(
                                    t => t.OBID,
                                    t => new { currhrs = t.CURRHRS, currcost = t.CURRCOST }
                            )
                    ));

        // --- Recalculate totals & earned cost ---
        function recalcTotals() {
            let totalHours = 0, totalCost = 0, totalEarnedHrs = 0, totalEarnedCost = 0;
            let dirEarned = 0, dirCost = 0;

                // First pass: calculate DirPct for direct rows
                $("#deliverablesTable tbody tr").each(function () {
                    if ($(this).find("button[name='addNew']").length) return;
                    const isDirect = $(this).find("input[type='checkbox']").prop("checked");
                    const cost = parseFloat($(this).find("input[name*='DelCost']").val()) || 0;
                    const pctInput = parseFloat($(this).find(".pctInput").val()) || 0;
                    const pct = pctInput / 100;
                    if (isDirect) { dirCost += cost; dirEarned += cost * pct; }
                });

                const dirPct = dirCost === 0 ? 0 : dirEarned / dirCost;
                $("#dirPctFooter").text((dirPct * 100).toFixed(1) + "%");
                $("#dirPctInput").val(dirPct);

                // Second pass: update visible rows
                $("#deliverablesTable tbody tr:visible").each(function () {
                    if ($(this).find("button[name='addNew']").length) return;

                    const hrs = parseFloat($(this).find("input[name*='DelHours']").val()) || 0;
                    const cost = parseFloat($(this).find("input[name*='DelCost']").val()) || 0;
                    const isDirect = $(this).find("input[type='checkbox']").prop("checked");
                    const pctInput = parseFloat($(this).find(".pctInput").val()) || 0;
                    const pct = isDirect ? pctInput / 100 : dirPct;

                    $(this).find(".pctInput").val((pct * 100).toFixed(0));

                    const earnedHrs = hrs * pct;
                    const earnedCost = cost * pct;

                    //$(this).find(".earnedHrs").val(earnedHrs.toFixed(2));
                    $(this).find(".earnedCost").val(earnedCost.toFixed(2));
                    $(this).find(".pctHidden").val(pct);
                    // show in visible readonly box
                    $(this).find(".earnedCostDisplay").val(earnedCost.toFixed(2));

                    // push to hidden input for posting
                    $(this).find(".earnedCostHidden").val(earnedCost.toFixed(2));

                    // push to hidden input for posting
                    $(this).find(".earnedHrsHidden").val(earnedHrs.toFixed(2));

                    totalHours += hrs;
                    totalCost += cost;
                    totalEarnedHrs += earnedHrs;
                    totalEarnedCost += earnedCost;
                });

                $("#totalHours").text(totalHours.toFixed(2));
                $("#totalCost").text(totalCost.toFixed(2));
                $("#totalEarnedHrs").text(totalEarnedHrs.toFixed(2));
                $("#totalEarnedCost").text(totalEarnedCost.toFixed(2));
                $("#totalCumulPct").text(totalCost === 0 ? "0%" : ((totalEarnedCost / totalCost) * 100).toFixed(1) + "%");

                checkBudgetMatch();
                checkBudgetConsistency();
            }

            // --- Budget checks ---
            function checkBudgetMatch() {
                let obidTotals = {};
                $("#deliverablesTable tbody tr").each(function () {
                    if ($(this).find("button[name='addNew']").length) return;
                    const obid = $(this).find("input[name*='OBID']").val();
                    const myTask = $(this).find("input[name*='MYTASK']").val();
                    const hrs = parseFloat($(this).find("input[name*='DelHours']").val()) || 0;
                    const cost = parseFloat($(this).find("input[name*='DelCost']").val()) || 0;
                    const key = obid + "|" + myTask;
                    if (!obidTotals[key]) obidTotals[key] = { hrs:0, cost:0, budgetHrs:0, budgetCost:0, rows:[] };
                    obidTotals[key].hrs += hrs;
                    obidTotals[key].cost += cost;
                    obidTotals[key].rows.push(this);
                    obidTotals[key].budgetHrs = parseFloat($(this).find(".budgetHrs").val()) || 0;
                    obidTotals[key].budgetCost = parseFloat($(this).find(".budgetCost").val()) || 0;
                });

                for (let key in obidTotals) {
                    const totals = obidTotals[key];
                    const hrsMatch = Math.abs(totals.hrs - totals.budgetHrs) < 0.01;
                    const costMatch = Math.abs(totals.cost - totals.budgetCost) < 0.01;
                    totals.rows.forEach(row => {
                        $(row).find("input[name*='DelHours']").toggleClass("text-danger", !hrsMatch);
                        $(row).find("input[name*='DelCost']").toggleClass("text-danger", !costMatch);
                    });
                }
            }

            function checkBudgetConsistency() {
                let taskTotals = {};
                $("#deliverablesTable tbody tr").each(function () {
                    if ($(this).find("button[name='addNew']").length) return;
                    const obid = $(this).find("select[name*='OBID']").val();
                    if (!obid) return;
                    const hrs = parseFloat($(this).find(".delHrs").val()) || 0;
                    const cost = parseFloat($(this).find(".delCost").val()) || 0;
                    if (!taskTotals[obid]) taskTotals[obid] = { hrs:0, cost:0, rows:[] };
                    taskTotals[obid].hrs += hrs;
                    taskTotals[obid].cost += cost;
                    taskTotals[obid].rows.push($(this));
                });

                for (let obid in taskTotals) {
                    const data = taskTotals[obid];
                    data.rows.forEach(row => {
                        const budgetHrs = parseFloat(row.find(".budgetHrs").val()) || 0;
                        const budgetCost = parseFloat(row.find(".budgetCost").val()) || 0;
                        const hrsMismatch = data.hrs !== budgetHrs;
                        const costMismatch = data.cost !== budgetCost;
                        row.find(".delHrs, .budgetHrs").toggleClass("text-danger", hrsMismatch);
                        row.find(".delCost, .budgetCost").toggleClass("text-danger", costMismatch);
                    });
                }
            }

            //needed this bc delpctcumul wasnt posting back to sql
            $("form").on("submit", function () {
                // make sure all rows push their latest values into hidden fields
                recalcTotals();

                // (optional debugging)
                $("#deliverablesTable tbody tr").each(function () {
                    console.log("Hidden pct for row:", $(this).find(".pctHidden").val());
                    console.log("Hidden earned cost for row:", $(this).find(".earnedCostHidden").val());
                });
            });

            // --- Auto cost calculation ---
            $("#deliverablesTable").on("input", ".delHrs", function () {
                const row = $(this).closest("tr");
                const hrs = parseFloat($(this).val()) || 0;
                const budgetHrs = parseFloat(row.find(".budgetHrs").val()) || 0;
                const budgetCost = parseFloat(row.find(".budgetCost").val()) || 0;
                const rate = budgetHrs === 0 ? 0 : budgetCost / budgetHrs;
                const newCost = hrs * rate;
                row.find(".delCost").val(newCost.toFixed(2));
                row.find(".delCostDisplay").val(newCost.toFixed(2));
                recalcTotals();
            });

            $("#newDelHrs").on("input", function () {
                const hrs = parseFloat($(this).val()) || 0;
                const budgetHrs = parseFloat($("#newBudgetHrs").val()) || 0;
                const budgetCost = parseFloat($("#newBudgetCost").val()) || 0;
                const rate = budgetHrs === 0 ? 0 : budgetCost / budgetHrs;
                const newCost = hrs * rate;
                $("#newDelCost").val(newCost.toFixed(2));
                $("#newDelCostDisplay").val(newCost.toFixed(2));
                recalcTotals();
            });

            //make sure progressdate gets autopopulated on refresh
            document.getElementById("progressDropdown").addEventListener("change", function () {
                document.getElementById("progressHidden").value = this.value;
            });

            // --- Modal cost calculation ---
            $(document).on("input", "#delHours, #obid", function () {
                const obid = $("#obid").val();
                const hrs = parseFloat($("#delHours").val()) || 0;
                let cost = 0;
                if (obid && budgetData[obid]) {
                    const currhrs = budgetData[obid].currhrs || 0;
                    const currcost = budgetData[obid].currcost || 0;
                    if (currhrs > 0) cost = (hrs / currhrs) * currcost;
                }
                $("#delCostDisplay").val(cost.toFixed(2));
                $("#delCost").val(cost.toFixed(2));
            });

            // --- Real-time filtering ---
            $("#filterBox").on("input", function () {
                const value = $(this).val().toLowerCase().trim();
                $("#deliverablesTable tbody tr").each(function () {
                    if ($(this).find("button[name='addNew']").length) return;
                    let rowTextParts = [];
                    $(this).find("td").each(function () {
                        const $cell = $(this);
                        const $select = $cell.find("select");
                        if ($select.length) { rowTextParts.push($select.find("option:selected").text() || ""); return; }
                        const $inputs = $cell.find("input");
                        if ($inputs.length) { $inputs.each(function(){ rowTextParts.push($(this).val()||""); }); return; }
                        rowTextParts.push($cell.text() || "");
                    });
                    $(this).toggle(rowTextParts.join(" ").toLowerCase().indexOf(value) !== -1);
                });
                recalcTotals();
            });

            // --- Run budget check on input changes ---
            $(document).on("input", "input[name*='DelHours'], input[name*='DelCost']", function () {
                checkBudgetMatch();
            });

            // --- Check SelectedDateTo is Saturday ---
            function checkSaturdayButtons() {
                $("input[name='SelectedDateTo']").each(function(){
                    const btn = $(this).closest("form").find("button[type='submit']");
                    const dt = new Date(this.value + "T00:00:00"); // fix parsing
                    btn.prop("disabled", isNaN(dt.getTime()) || dt.getDay() !== 6);

                    // optional warning
                    let warning = $(this).siblings(".date-warning");
                    if (!warning.length) $(this).after('<span class="date-warning text-danger ml-2">Must be Saturday</span>');
                    $(this).siblings(".date-warning").toggle(dt.getDay() !== 6);
                });
            }

            $(document).on("change", "input[name='SelectedDateTo']", checkSaturdayButtons);
            checkSaturdayButtons(); // run on page load

            // --- Initial calculations ---
            recalcTotals();
        });
    </script>
}

