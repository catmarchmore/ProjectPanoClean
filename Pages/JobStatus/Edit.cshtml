@page
@model ProjectPano.Pages.JobStatus.EditModel
@{
}
@* <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"> *@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
@* <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script> *@

<h1>Update Progress Status</h1>

@* @if (Model.errorMessage.Length > 0)
{
	<div class="alert alert-warning alert-dismissible fade show" role="alert">
		<strong>@Model.errorMessage</strong>
		<button type="button" class="btn btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
	</div>

} *@

@* @if (Model.successMessage.Length > 0)
{
	<div class="alert alert-success alert-dismissible fade show" role="alert">
		<strong>@Model.successMessage</strong>
		<button type="button" class="btn btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
	</div>
} *@

<form method="POST">
@* 	<input type="text" name="HiddenID" value="@Model.ProgressStatus.ProjectProgID" /> *@
	<div class="row mb-3">
@* 		<label class="col-sm-3 col-form-label">ProjectProgID:</label> *@
		<div class="col-sm-6">
			<input type="hidden" name="ProjectProgID" value="@Model.ProgressStatus.ProjectProgID" readonly/>
		</div>
	</div>
@* 	<div class="row mb-3">
		<label class="col-sm-3 col-form-label">Report WE:</label>
		<div class="col-sm-6">
			<input type="text" class="form-control" name="ReportWE" placeholder="@Model.ProgressStatus.WeekEnd.ToString("dd-MMM-yy")" readonly/>
		</div>
	</div> *@

	@if (Model.JobFinanceInfo != null)
	{
		<div class="row mb-3">
			<label class="col-sm-3 col-form-label">Current Budget:</label>
			<div class="col-sm-6">
				<input type="text" class="form-control" readonly
					   value="@Model.JobFinanceInfo.CurrentBudget.ToString("C0")" />
			</div>
		</div>
		<div class="row mb-3">
			<label class="col-sm-3 col-form-label">Current Spend:</label>
			<div class="col-sm-6">
				<input type="text" class="form-control" readonly
					   value="@Model.JobFinanceInfo.CurrentCumulativeSpend.ToString("C0")" />
			</div>
		</div>	
		}


	<div class="row mb-3">
		<label class="col-sm-3 col-form-label">Percent Complete:</label>
		<div class="col-sm-6">
				<input type="number" 
					step="0.1" 
					min="0" 
					max="100" 
					class="form-control" 
					name="CumulPeriodProgress" 
					value="@(Model.ProgressStatus.CumulPeriodProgress * 100)" />
		</div>
	</div>
	<div class="row mb-3">
		<label class="col-sm-3 col-form-label">Forecast Finish WE:</label>
		<div class="col-sm-6">
			<input type="date" class="form-control" name="FcastFinishDate" value="@Model.ProgressStatus.FcastFinishDate?.ToString("yyyy-MM-dd")" />
		</div>
	</div>
	<div class="row mb-3">
		<label class="col-sm-3 col-form-label">Comment:</label>
		<div class="col-sm-6">
			<textarea class="form-control" name="Comment" id="commentBox" rows="4" maxlength="255">@Model.ProgressStatus.Comment</textarea>
			<small id="charCount" class="form-text text-muted">255 characters remaining</small>
		</div>
	</div>
	<div class="row mb-3">
		<label class="col-sm-3 col-form-label">EAC Cost:</label>
		<div class="col-sm-6">
			<input type="number" step="0.01" class="form-control" name="EAC_Info" value="@Model.ProgressStatus.EAC_Info" />
			<p class="text-muted mt-1">Current EAC: @Model.ProgressStatus.EAC_Info?.ToString("C")</p>
		</div>
	</div>
	<div class="row mb-3">
		<div class="offset-sm-3 col-sm-3 g-grid">
			<button type="submit" class="btn btn-success">
				<span class="glyphicon glyphicon-ok"></span>Submit
			</button> &nbsp;

			<a href="/JobIndex/Index" class="btn btn-danger">
				<span class="glyphicon glyphicon-remove"></span> Cancel
			</a>

		</div>
	</div>
</form>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const commentBox = document.getElementById("commentBox");
		const charCount = document.getElementById("charCount");
		const maxLength = 255;

		function updateCharCount() {
			const remaining = maxLength - commentBox.value.length;
			charCount.textContent = `${remaining} characters remaining`;
		}

		commentBox.addEventListener("input", updateCharCount);

		// Initialize on page load
		updateCharCount();
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const eacInput = document.getElementById("eacCost");

		if (!eacInput) return; // Exit early if element not found

		function formatCurrency(value) {
			const numericValue = value.replace(/[^\d.]/g, '');
			if (numericValue === '') return '';

			const number = parseFloat(numericValue);
			if (isNaN(number)) return '';

			return number.toLocaleString('en-US', {
				style: 'currency',
				currency: 'USD'
			});
		}

		eacInput.addEventListener("input", function () {
			// Get cursor position before formatting
			const cursorPosition = eacInput.selectionStart;
			const formattedValue = formatCurrency(eacInput.value);
			eacInput.value = formattedValue;

			// Reset cursor position (optional: can cause jumpiness)
			eacInput.setSelectionRange(formattedValue.length, formattedValue.length);
		});

		// Format initial value on load
		if (eacInput.value) {
			eacInput.value = formatCurrency(eacInput.value);
		}
	});
</script>





